===============================================================================
==
==  Münster-Curry-Compiler
==  Distribution zur Anwendung in PAKCS
==
==  Letztes Update: 16.08.05

Diese Distribution enthält eine modifizierte Version des 
Münster-Curry-Compilers (MCC). Dieser Compiler ist u.a. in der Lage aus 
Curry-Programmen (entwickelt nach PAKCS-Standard) Flat-Darstellungen
(FlatCurry ".fcy", FlatInterface ".fint" und FlatXML "_flat.xml"),
sowie Abatract-Darstellungen (AbstractCurry ".acy" und untyped
AbstractCurry ".uacy") zu generieren.



1. Installation
---------------

Der Compiler wird durch Aufruf von 'make' im Verzeichnis 'mcc' installiert.
Befindet sich im Verzeichnis 'mcc' bereits eine compilierte Version,
so wird empfohlen vor einer erneuten Installation 'make clean' auszuführen.

Im Verzeichnis 'mcc/bin/' befinden sich nach erfolgreicher Installation
folgende ausführbare Dateien:

	cyc		- der Curry-Compiler
	cymake		- der Curry-Programm-Builder

'cyc' übersetzt einzelne Curry-Programme, wobei allerding keine Import-
Abhängigkeiten aufgelöst werden. Sämtliche importierten Module müssen
bereits übersetzt sein, ansonsten kommt es zu einer Fehlermeldung.
'cymake' übersetzt ein Curry-Programm, sowie auch alle importierten
Module.
Beide Kommandos funktionieren mit allen in den folgenden Abschnitten
beschriebenen Optionen.



2. Kommandoübersicht
--------------------

In der folgenden Tabelle sind die Optionen zur Generierung der jeweiligen
Darstellungen für die Kommandos 'cyc' und 'cymake' aufgelistet:

	--flat		: Erzeugt FlatCurry- und FlatInterface-Datei
	--xml		: Erzeugt FlatXML-Datei
	--acy		: Erzeugt (typinferierte) AbstractCurry-Datei
	--uacy		: Erzeugt ungetypte AbstractCurry-Datei



3. Erzeugung von FlatCurry- und FlatXML-Programmen
--------------------------------------------------

Die Übersetzung eines Curry-Programms 'file.curry', sowie sämtlicher
importierter Module nach FlatCurry bzw. FlatInterface, bewirkt folgendes
Kommando:

	cymake --flat <filename>

Hierdurch werden die Dateien mit den entsprechenden Endungen ".fcy" und
".fint" generiert. Der Dateiname <filename> kann hierbei mit oder ohne 
Endung ".curry" bzw. ".lcurry" angegeben werden.

Die analogen Übersetzungen in die FlatXML-Darstellung bewirkt folgendes
Kommando:

	cymake --xml <file name>

Die hierdurch generierte Flat-XML-Datei hat die Endung '_flat.xml'.



4. Erzeugung von AbstractCurry-Programmen
-----------------------------------------

Die Übersetzung eines Curry-Programms 'file.curry' nach (typgeprüftem)
AbstractCurry bewirkt folgendes Kommando:

	cymake --acy <filename>

Hierdurch wird die entsprechende Datei (mit der Endung ".acy") generiert.
Der Dateiname <filename> kann hierbei mit oder ohne Endung ".curry" bzw.
".lcurry" angegeben werden.

Bei der Generierung von AbstractCurry-Dateien werden FlatCurry-Dateien 
für alle Importe erzeugt. Dies ist notwendig, da die entsprechenden 
Interfaces für die Typinferenz und die statisch-semantische Analyse
benötigt werden.

Ungetypte, bzw. typsignierte AbstractCurry-Programme werden mit folgendem
Kommando generiert:

	cymake --uacy <filename>

Die hierdurch generierte Datei besitzt die Endung ".uacy".

Die Generierung des ungetypten AbstractCurry-Programms findet ohne
Typüberprüfung statt (d.h. auch Programme mit Typfehlern werden übersetzt).
Alle Funktionen besitzen entweder die im Quellprogramm angegebenen Typsignatur,
oder, sofern diese nicht vorhanden ist, den Dummy-Typ "prelude.untyped".

Auch bei der Übersetzung in die ungetypte AbstractCurry-Darstellung werden
für alle importierten Module FlatCurry-Dateien erzeugt.




5. Anmerkungen
--------------

- Neben den gewünschten Darstellungen werden zusätzlich noch
  Interface-Dateien (Endung ".icurry") erzeugt. Diese werden
  intern vom MCC benötigt (z.B. zur Auflösung von Import-Abhängigkeiten).

- Um die PAKCS-Bibliotheken (insbesondere die Prelude) für Übersetzungen 
  nutzen zu können muß die Umgebungsvariable 'PAKCS_LIB' auf die
  entsprechenden Pfade verweisen, z.B. mittels

	export PAKCS_LIB=<pakcs path>/pacs/lib:<pakcs path>/pacs/lib/meta:...

 wobei <pakcs path> das Verzeichnis ist, das die PAKCS-Distribution
 enthält.



Bekannte Probeleme
------------------

- Lambda-, do-, if-, case-, oder let-Ausdrücke, die in Argumenten von
  Funktionsaufrufen verwendet werden, müssen immer geklammert werden.

- 'let'-Anweisungen dürfen nicht folgendes Layout besitzen:

           let x = <expr>
               in ...

- Die Regeln einer Funktionsdeklaration müssen immer zusammenstehen, d.h.
  nicht durch andere Deklarationen unterbrochen werden.

- In einigen Fällen kann es vorkommen, daß die Angabe der Funktionsstelligkeit
  in FlatCurry-Programmen nicht mit der Anzahl der Argumente übereinstimmt.
  Der MCC berechnet Funktionsstelligkeiten anhand der Funktionstypen.

- Es ist bislang nicht möglich, den Konstruktor für leere Listen [], sowie 
  den Unit-Konstruktor () zu qualifizieren (z.B. führt 'prelude.[]' zu 
  einem Fehler). Der Listenkonstruktor (:), sowie Tupel-Konstruktoren
  dagegen sind qualifizierbar.

- FlatXML-Übersetzungen können derzeit mittels der Funktionen aus dem
  PAKCS-Modul "FlatXML" noch nicht eingelesen werden, da es Unstimmigkeiten
  zwischen dem generierten und den erforderlichen Formaten gibt.

- Bei der Erzeugung von typgeprüftem AbstractCurry können die im Quelltext
  verwendeten Bezeichner für Typvariablen nicht ins AbstractCurry-Programm
  übernommen werden. Stattdessen generiert der Übersetzer neue
  Bezeichner.

- Bei der Erzeugung von ungetyptem AbstractCurry werden Typsynonyme in
  Typsignaturen von Funktionen nicht dereferenziert.

- Leider gibt der MCC derzeit noch keinerlei Warnungen aus.


