===============================================================================
==
==  Münster-Curry-Compiler
==  Distribution zur Anwendung in PAKCS
==
==  Letztes Update: 13.07.05

Diese Distribution enthält eine modifizierte Version des 
Münster-Curry-Compilers (MCC). Dieser Compiler ist u.a. in der Lage aus 
Curry-Programmen (entwickelt nach PAKCS-Standard) FlatCurry- (.fcy), 
FlatInterface- (.fint) und FlatXML- (_flat.xml) Darstellungen zu generieren.



Installation
------------

Der Compiler wird durch Aufruf von 'make' im Verzeichnis 'mcc' installiert.
Befindet sich im Verzeichnis 'mcc' bereits eine compilierte Version,
so wird empfohlen vor einer erneuten Installation 'make clean' auszuführen.


Anwendung
---------

Im Verzeichnis 'mcc/bin/' befinden sich nach erfolgreicher Installation
folgende ausführbare Dateien:

	cyc		- der Curry-Compiler
	cymake		- der Curry-Programm-Builder

Das Kommando 'cyxml' zur Erzeugung von Flat-Dateien sollte in 
Zukunft nicht mehr verwendet werden, da 'cyc' und 'cymake' nun
über entsprechende Optionen verfügen.

Die Übersetzung eines Curry-Programms 'file.curry', sowie sämtlicher
importierter Module nach FlatCurry bzw. FlatInterface, bewirkt folgendes
Kommando:

	cymake --flat <file name>

Hierdurch werden die Dateien mit den entsprechenden Endungen ".fcy" und
".fint" generiert. Der Dateiname <file name> kann hierbei mit oder ohne 
Endung ".curry" bzw. ".lcurry" angegeben werden.

Die analogen Übersetzungen in die FlatXML-Darstellung bewirkt folgendes
Kommando:

	cymake --xml <file name>

Die hierdurch generierte Flat-XML-Datei hat die Endung '_flat.xml'.

Während 'cymake' auch alle Importabhängigkeiten auflöst und die entsprechenden
Module in die gewünschte(n) Darstellung(en) übersetzt, können mittels
'cyc' einzelne Dateien übersetzt werden. Die hierzu nötigen Optionen
sind die selben, wie bei 'cymake'.



Anmerkungen
-----------

- Neben den gewünschten Darstellungen werden zusätzlich noch
  Interface-Dateien (Endung ".icurry") erzeugt. Diese werden
  intern vom MCC benötigt (z.B. zur Auflösung von Import-Abhängigkeiten).

- Um die PAKCS-Bibliotheken (insbesondere die Prelude) für Übersetzungen 
  nutzen zu können muß die Umgebungsvariable 'PAKCS_LIB' auf die
  entsprechenden Pfade verweisen, z.B. mittels

	export PAKCS_LIB=<pakcs path>/pacs/lib:<pakcs path>/pacs/lib/meta:...

 wobei <pakcs path> das Verzeichnis ist, das die PAKCS-Distribution
 enthält.



Bekannte Probeleme
------------------

- Lambda-, do-, case-, oder let-Ausdrücke, die in Argumenten von
  Funktionsaufrufen verwendet werden, müssen immer geklammert werden.

- 'let'-Anweisungen dürfen nicht folgendes Layout besitzen:

           let x = <expr>
               in ...

- Die Regeln einer Funktionsdeklaration müssen immer zusammenstehen, d.h.
  Nicht durch andere Deklarationen unterbrochen werden.

- Aufgrund eines Fehlers im Parser ist es nicht möglich, den Listenoperator (:)
  zu qualifizieren ('prelude.:' führt zu einem Fehler).

- FlatXML-Übersetzungen können derzeit mittels der Funktionen aus dem
  PAKCS-Modul "FlatXML" noch nicht eingelesen werden, da es Unstimmigkeiten
  zwischen dem generierten und den erforderlichen Formaten gibt.

- Leider gibt der MCC derzeit noch keinerlei Warnungen aus.


