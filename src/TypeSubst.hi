__interface "Main" TypeSubst 1 500 where
__export  Subst bindSubst compose idSubst;
__export  TypeSubst SubstType{subst} TypeSubst bindVar expandAliasType normalizze substVar;
import PrelFloat;
import PrelIOBase;
import PrelReal;
import Monad;
import Char;
import PrelConc;
import Position;
import CurrySyntax;
import Utils;
import Ratio;
import Pretty;
import CurryPP;
import Set;
import TopEnv :: 1 1 1 Source 1 TopEnv 1 zdfFunctorTopEnv 1 zdfShowTopEnv 1;
import Subst :: 1 1 1 Subst 1 bindSubst 1 compose 1 idSubst 1 substVarzq 1 unbindSubst 1 zdfShowSubst 1;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelEnum :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Types :: 1 1 ExistTypeScheme 1 Type 1 TypeScheme 1 typeVars 1 zdfEqExistTypeScheme 1 zdfEqType 1 zdfEqTypeScheme 1 zdfShowExistTypeScheme 1 zdfShowType 1 zdfShowTypeScheme 1;
import Base :: 1 1 1 ValueInfo 1 zdfShowValueInfo 1;
import Ident :: 1 1 Ident 1 ModuleIdent 1 QualIdent 1 zdfEqQualIdent 1 zdfOrdQualIdent 1 zdfShowQualIdent 1;
import Env :: 1 1 Env 1;
import Map :: 1 1 FM 1;
import Maybe :: 1;
import List :: 1;
import PrelMaybe :: 1;
;
instance __forall a (SubstType a) => {SubstType (TopEnv.TopEnv a)} = zdfSubstTypeTopEnv ;
instance {SubstType Base.ValueInfo} = zdfSubstTypeValueInfo ;
instance {SubstType Types.ExistTypeScheme} = zdfSubstTypeExistTypeScheme ;
instance {SubstType Types.TypeScheme} = zdfSubstTypeTypeScheme ;
instance {SubstType Types.Type} = zdfSubstTypeType ;
class SubstType a where { subst :: TypeSubst -> a -> a; };
expandAliasType :: [Types.Type] -> Types.Type -> Types.Type;
normalizze :: Types.Type -> Types.Type;
substVar :: TypeSubst -> PrelBase.Int -> Types.Type;
bindVar :: PrelBase.Int -> Types.Type -> TypeSubst -> TypeSubst;
type TypeSubst = Subst.Subst PrelBase.Int Types.Type;
zdfSubstTypeTopEnv :: __forall a (SubstType a) => {SubstType (TopEnv.TopEnv a)};
zdfSubstTypeType :: {SubstType Types.Type};
zdfSubstTypeExistTypeScheme :: {SubstType Types.ExistTypeScheme};
zdfSubstTypeTypeScheme :: {SubstType Types.TypeScheme};
zdfSubstTypeValueInfo :: {SubstType Base.ValueInfo};
