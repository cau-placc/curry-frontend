__interface "Main" Imports 1 500 where
__export  Imports importInterface importInterfaceIntf importUnifyData;
import PrelFloat;
import PrelNum;
import PrelReal;
import PrelEnum;
import PrelShow;
import Monad;
import Char;
import PrelConc;
import List;
import Utils;
import Ratio;
import Pretty;
import CurryPP;
import Position :: 1 1 Position 1 zdfEqPosition 1 zdfOrdPosition 1;
import Maybe :: 1;
import Env :: 1 1 1 Env 1 bindEnv 1 emptyEnv 1 envToList 1 lookupEnv 1 zdfFunctorEnv 1;
import Ident :: 1 1 Ident 1 ModuleIdent 1 QualIdent 1 moduleName 1 name 1 qualQualify 1 qualify 1 qualifyWith 1 splitQualIdent 1 unqualify 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1;
import PrelBase ! :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelList :: 1;
import Base :: 1 1 1 Data 1 OpPrec 1 PEnv 1 PrecInfo 1 TCEnv 1 TypeInfo 1 ValueEnv 1 ValueInfo 1 errorAt 1 internalError 1 toQualType 1 toQualTypes 1 zdfEntityPrecInfo 1 zdfEntityTypeInfo 1 zdfEntityValueInfo 1 zdfEqOpPrec 1 zdfEqPrecInfo 1;
import CurrySyntax :: 1 1 ConstrDecl 1 IDecl 1 Import 1 ImportSpec 1 Infix 1 Interface 1 NewConstrDecl 1 TypeExpr 1 zdfEqConstrDecl 1 zdfEqIDecl 1 zdfEqImport 1 zdfEqImportSpec 1 zdfEqInfix 1 zdfEqInterface 1 zdfEqNewConstrDecl 1 zdfEqTypeExpr 1;
import PrelMaybe :: 1;
import TopEnv :: 1 1 1 Entity 1 Source 1 TopEnv 1 allImports 1 importTopEnv 1 qualImportTopEnv 1 zddmmerge 1 zdfFunctorTopEnv 1;
import Map :: 1 1 1 FM 1 addToFM 1 lookupFM 1 zdfEqFM 1 zdfFunctorFM 1 zzeroFM 1;
import Set :: 1 1 1 Set 1 elemSet 1 fromListSet 1 notElemSet 1 zdfEqSet 1;
import Types :: 1 1 ExistTypeScheme 1 Type 1 TypeScheme 1 polyType 1 zdfEqExistTypeScheme 1 zdfEqType 1 zdfEqTypeScheme 1;
;
importUnifyData :: Base.TCEnv -> Base.TCEnv;
importInterfaceIntf :: CurrySyntax.Interface -> Base.PEnv -> Base.TCEnv -> Base.ValueEnv -> (Base.PEnv, Base.TCEnv, Base.ValueEnv);
importInterface :: Position.Position -> Ident.ModuleIdent -> PrelBase.Bool -> PrelMaybe.Maybe CurrySyntax.ImportSpec -> CurrySyntax.Interface -> Base.PEnv -> Base.TCEnv -> Base.ValueEnv -> (Base.PEnv, Base.TCEnv, Base.ValueEnv);
type ExpPEnv = Env.Env Ident.Ident Base.PrecInfo;
type ExpTCEnv = Env.Env Ident.Ident Base.TypeInfo;
type ExpValueEnv = Env.Env Ident.Ident Base.ValueInfo;
