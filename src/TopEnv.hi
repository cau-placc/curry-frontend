__interface "Main" TopEnv 1 500 where
__export  TopEnv Entity{merge origName} TopEnv allImports bindTopEnv emptyTopEnv importTopEnv localBindings lookupTopEnv moduleImports predefTopEnv qualBindTopEnv qualImportTopEnv qualLookupTopEnv qualRebindTopEnv rebindTopEnv unbindTopEnv;
import Char;
import PrelConc;
import List;
import Ident :: 1 1 1 Ident 1 ModuleIdent 1 QualIdent 1 isQualified 1 qualify 1 qualifyWith 1 unqualify 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import Maybe :: 1;
import Env :: 1 1 1 Env 1 bindEnv 1 emptyEnv 1 envToList 1 lookupEnv 1 zdfFunctorEnv 1 zdfShowEnv 1;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import PrelMaybe :: 1;
import Utils :: 1 1 1 apSnd 1;
import Map :: 1 1 FM 1;
;
instance __forall a (PrelShow.Show a) => {PrelShow.Show (TopEnv a)} = zdfShowTopEnv ;
instance {PrelBase.Eq Source} = zdfEqSource ;
instance {PrelShow.Show Source} = zdfShowSource ;
instance {PrelBase.Functor TopEnv} = zdfFunctorTopEnv ;
class Entity a where { origName :: a -> Ident.QualIdent; merge = :: a -> a -> PrelMaybe.Maybe a; };
moduleImports :: __forall a => Ident.ModuleIdent -> TopEnv a -> [(Ident.Ident, a)];
localBindings :: __forall a => TopEnv a -> [(Ident.Ident, a)];
allImports :: __forall a => TopEnv a -> [(Ident.QualIdent, a)];
qualLookupTopEnv :: __forall a => Ident.QualIdent -> TopEnv a -> [a];
lookupTopEnv :: __forall a => Ident.Ident -> TopEnv a -> [a];
unbindTopEnv :: __forall a => Ident.Ident -> TopEnv a -> TopEnv a;
qualRebindTopEnv :: __forall a => Ident.QualIdent -> a -> TopEnv a -> TopEnv a;
rebindTopEnv :: __forall a => Ident.Ident -> a -> TopEnv a -> TopEnv a;
qualBindTopEnv :: __forall a => Ident.QualIdent -> a -> TopEnv a -> TopEnv a;
bindTopEnv :: __forall a => Ident.Ident -> a -> TopEnv a -> TopEnv a;
qualImportTopEnv :: __forall a (Entity a) => Ident.ModuleIdent -> Ident.Ident -> a -> TopEnv a -> TopEnv a;
importTopEnv :: __forall a (Entity a) => Ident.ModuleIdent -> Ident.Ident -> a -> TopEnv a -> TopEnv a;
predefTopEnv :: __forall a (Entity a) => Ident.QualIdent -> a -> TopEnv a -> TopEnv a;
emptyTopEnv :: __forall a => TopEnv a;
data Source = Local | Import [Ident.ModuleIdent];
newtype TopEnv a = TopEnv (Env.Env Ident.QualIdent [(Source, a)]);
zddmmerge :: __forall a (Entity a) => a -> a -> PrelMaybe.Maybe a;
zdfShowSource :: {PrelShow.Show Source};
zdfEqSource :: {PrelBase.Eq Source};
zdfShowTopEnv :: __forall a (PrelShow.Show a) => {PrelShow.Show (TopEnv a)};
zdfFunctorTopEnv :: {PrelBase.Functor TopEnv};
