__interface "Main" IntfCheck 1 500 where
__export  IntfCheck fixInterface intfCheck intfEquiv;
import PrelFloat;
import PrelReal;
import PrelEnum;
import Monad;
import Char;
import PrelConc;
import Ratio;
import CurryPP;
import Pretty;
import Utils;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Prelude :: 1;
import Base :: 1 1 1 Data 1 OpPrec 1 PEnv 1 PrecInfo 1 TCEnv 1 TypeInfo 1 ValueEnv 1 ValueInfo 1 bindTypeInfo 1 errorAt 1 internalError 1 lookupTC 1 qualLookupP 1 qualLookupTC 1 qualLookupValue 1 toQualType 1 toQualTypes 1 zdfEqOpPrec 1 zdfEqPrecInfo 1 zdfShowData 1 zdfShowOpPrec 1 zdfShowPrecInfo 1 zdfShowTypeInfo 1 zdfShowValueInfo 1;
import Maybe :: 1;
import List :: 1;
import Set :: 1 1 1 Set 1 elemSet 1 fromListSet 1 notElemSet 1 zdfEqSet 1 zdfShowSet 1;
import PrelMaybe :: 1;
import Ident :: 1 1 Ident 1 ModuleIdent 1 QualIdent 1 isQualified 1 moduleName 1 name 1 qualName 1 qualify 1 qualifyWith 1 splitQualIdent 1 unqualify 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import Position :: 1 1 Position 1 zdfEqPosition 1 zdfOrdPosition 1 zdfShowPosition 1;
import Env :: 1 1 Env 1;
import TopEnv :: 1 1 Source 1 TopEnv 1 zdfFunctorTopEnv 1 zdfShowTopEnv 1;
import CurrySyntax :: 1 1 ConstrDecl 1 IDecl 1 Infix 1 Interface 1 NewConstrDecl 1 TypeExpr 1 zdfEqConstrDecl 1 zdfEqIDecl 1 zdfEqInfix 1 zdfEqInterface 1 zdfEqNewConstrDecl 1 zdfEqTypeExpr 1 zdfShowConstrDecl 1 zdfShowIDecl 1 zdfShowInfix 1 zdfShowInterface 1 zdfShowNewConstrDecl 1 zdfShowTypeExpr 1;
import Types :: 1 1 ExistTypeScheme 1 Type 1 TypeScheme 1 zdfEqExistTypeScheme 1 zdfEqType 1 zdfEqTypeScheme 1 zdfShowExistTypeScheme 1 zdfShowType 1 zdfShowTypeScheme 1;
import Map :: 1 1 FM 1;
;
fixInterface :: CurrySyntax.Interface -> CurrySyntax.Interface;
intfEquiv :: CurrySyntax.Interface -> CurrySyntax.Interface -> PrelBase.Bool;
intfCheck :: Base.PEnv -> Base.TCEnv -> Base.ValueEnv -> CurrySyntax.Interface -> CurrySyntax.Interface;
