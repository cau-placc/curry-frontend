__interface "Main" Types 1 500 where
__export  Types ExistTypeScheme{ForAllExist} Type{TypeArrow TypeConstrained TypeConstructor TypeSkolem TypeVariable} TypeScheme{ForAll} arrowArgs arrowArity arrowBase boolType charType floatType intType ioType isArrowType listType monoType polyType primType stringType successType tupleType typeConstrs typeSkolems typeVar typeVars unitType;
import Char;
import PrelMaybe;
import Ident :: 1 1 1 Ident 1 ModuleIdent 1 QualIdent 1 boolId 1 charId 1 floatId 1 intId 1 ioId 1 listId 1 preludeMIdent 1 qualifyWith 1 successId 1 tupleId 1 unitId 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import List :: 1;
;
instance {PrelBase.Eq ExistTypeScheme} = zdfEqExistTypeScheme ;
instance {PrelShow.Show ExistTypeScheme} = zdfShowExistTypeScheme ;
instance {PrelBase.Eq TypeScheme} = zdfEqTypeScheme ;
instance {PrelShow.Show TypeScheme} = zdfShowTypeScheme ;
instance {PrelBase.Eq Type} = zdfEqType ;
instance {PrelShow.Show Type} = zdfShowType ;
primType :: Ident.Ident -> [Type] -> Type;
typeVar :: PrelBase.Int -> Type;
tupleType :: [Type] -> Type;
ioType :: Type -> Type;
listType :: Type -> Type;
successType :: Type;
stringType :: Type;
floatType :: Type;
intType :: Type;
charType :: Type;
boolType :: Type;
unitType :: Type;
polyType :: Type -> TypeScheme;
monoType :: Type -> TypeScheme;
typeSkolems :: Type -> [PrelBase.Int];
typeConstrs :: Type -> [Ident.QualIdent];
typeVars :: Type -> [PrelBase.Int];
arrowBase :: Type -> Type;
arrowArgs :: Type -> [Type];
arrowArity :: Type -> PrelBase.Int;
isArrowType :: Type -> PrelBase.Bool;
data Type = TypeConstructor Ident.QualIdent [Type] | TypeVariable PrelBase.Int | TypeConstrained [Type] PrelBase.Int | TypeArrow Type Type | TypeSkolem PrelBase.Int;
data TypeScheme = ForAll PrelBase.Int Type;
data ExistTypeScheme = ForAllExist PrelBase.Int PrelBase.Int Type;
zdfShowType :: {PrelShow.Show Type};
zdfEqType :: {PrelBase.Eq Type};
zdfShowTypeScheme :: {PrelShow.Show TypeScheme};
zdfEqTypeScheme :: {PrelBase.Eq TypeScheme};
zdfShowExistTypeScheme :: {PrelShow.Show ExistTypeScheme};
zdfEqExistTypeScheme :: {PrelBase.Eq ExistTypeScheme};
