__interface "Main" NestEnv 1 500 where
__export  NestEnv NestEnv bindNestEnv globalEnv lookupNestEnv nestEnv qualBindNestEnv qualLookupNestEnv toplevelEnv;
__export  TopEnv Entity{merge origName} TopEnv allImports bindTopEnv emptyTopEnv importTopEnv localBindings lookupTopEnv moduleImports predefTopEnv qualBindTopEnv qualImportTopEnv qualLookupTopEnv qualRebindTopEnv rebindTopEnv unbindTopEnv;
import PrelList;
import Char;
import PrelConc;
import Maybe;
import List;
import Utils;
import TopEnv :: 1 1 1 Entity 1 Source 1 TopEnv 1 allImports 1 bindTopEnv 1 emptyTopEnv 1 importTopEnv 1 localBindings 1 lookupTopEnv 1 moduleImports 1 predefTopEnv 1 qualBindTopEnv 1 qualImportTopEnv 1 qualLookupTopEnv 1 qualRebindTopEnv 1 rebindTopEnv 1 unbindTopEnv 1 zddmmerge 1 zdfFunctorTopEnv 1 zdfShowTopEnv 1;
import Ident :: 1 1 1 Ident 1 ModuleIdent 1 QualIdent 1 isQualified 1 unqualify 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import Env :: 1 1 1 Env 1 bindEnv 1 emptyEnv 1 lookupEnv 1 zdfFunctorEnv 1 zdfShowEnv 1;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelShow :: 1;
import Map :: 1 1 FM 1;
import PrelMaybe :: 1;
;
instance __forall a (PrelShow.Show a) => {PrelShow.Show (NestEnv a)} = zdfShowNestEnv ;
instance {PrelBase.Functor NestEnv} = zdfFunctorNestEnv ;
globalEnv :: __forall a => TopEnv.TopEnv a -> NestEnv a;
nestEnv :: __forall a => NestEnv a -> NestEnv a;
toplevelEnv :: __forall a => NestEnv a -> TopEnv.TopEnv a;
qualLookupNestEnv :: __forall a => Ident.QualIdent -> NestEnv a -> [a];
lookupNestEnv :: __forall a => Ident.Ident -> NestEnv a -> [a];
qualBindNestEnv :: __forall a => Ident.QualIdent -> a -> NestEnv a -> NestEnv a;
bindNestEnv :: __forall a => Ident.Ident -> a -> NestEnv a -> NestEnv a;
data NestEnv a = GlobalEnv (TopEnv.TopEnv a) | LocalEnv (NestEnv a) (Env.Env Ident.Ident a);
zdfShowNestEnv :: __forall a (PrelShow.Show a) => {PrelShow.Show (NestEnv a)};
zdfFunctorNestEnv :: {PrelBase.Functor NestEnv};
