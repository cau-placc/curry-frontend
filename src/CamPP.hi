__interface "Main" CamPP 1 500 where
__export  CamPP bar blockIndent ppAlt ppAlts ppBindings ppBlock ppCase ppCode ppDecl ppExpr ppKW ppLiteral ppModule ppName ppNames ppSeq ppStmt;
import PrelReal;
import PrelEnum;
import PrelRead;
import Ratio;
import PrelBase ! :: 1;
import PrelFloat :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Cam :: 1 1 1 Alt 1 Bind 1 Case 1 ConstrDecl 1 Decl 1 Expr 1 Literal 1 Module 1 Name 1 RF 1 Stmt 1 Tag 1 zdfEqBind 1 zdfEqCase 1 zdfEqConstrDecl 1 zdfEqDecl 1 zdfEqExpr 1 zdfEqLiteral 1 zdfEqName 1 zdfEqRF 1 zdfEqStmt 1 zdfEqTag 1 zdfShowBind 1 zdfShowCase 1 zdfShowConstrDecl 1 zdfShowDecl 1 zdfShowExpr 1 zdfShowLiteral 1 zdfShowName 1 zdfShowRF 1 zdfShowStmt 1 zdfShowTag 1;
import Char :: 1;
import Pretty :: 1 1 1 Doc 1 TextDetails 1 char 1 colon 1 comma 1 double 1 empty 1 equals 1 fsep 1 int 1 lbrace 1 nest 1 parens 1 punctuate 1 rbrace 1 semi 1 sep 1 space 1 text 1 vcat 1 zdfShowDoc 1 zdzd 1 zlzg 1 zlzpzg 1;
;
ppNames :: [Cam.Name] -> Pretty.Doc;
bar :: Pretty.Doc;
ppName :: Cam.Name -> Pretty.Doc;
ppKW :: PrelBase.String -> Pretty.Doc;
ppAlt :: Cam.Stmt -> Pretty.Doc;
ppCase :: Cam.Case -> Pretty.Doc;
ppAlts :: __forall a => (a -> Pretty.Doc) -> [a] -> Pretty.Doc;
ppExpr :: Cam.Expr -> Pretty.Doc;
ppLiteral :: Cam.Literal -> Pretty.Doc;
ppBindings :: [Pretty.Doc] -> Pretty.Doc;
ppSeq :: Pretty.Doc -> Cam.Stmt -> Pretty.Doc;
ppStmt :: Cam.Stmt -> Pretty.Doc;
ppBlock :: Pretty.Doc -> Pretty.Doc -> Pretty.Doc;
ppCode :: Pretty.Doc -> Cam.Stmt -> Pretty.Doc;
ppDecl :: Cam.Decl -> Pretty.Doc;
ppModule :: Cam.Module -> Pretty.Doc;
blockIndent :: PrelBase.Int;
