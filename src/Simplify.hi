__interface "Main" Simplify 1 500 where
__export  Simplify simplify;
import PrelReal;
import PrelEnum;
import PrelArr;
import Char;
import PrelConc;
import IO;
import Maybe;
import List;
import Error;
import IORef;
import TypeSubst;
import IOExts;
import Ratio;
import Pretty;
import CurryPP;
import Set;
import Utils;
import Subst;
import Env :: 1 1 1 Env 1 bindEnv 1 emptyEnv 1 lookupEnv 1 zdfShowEnv 1;
import Ident :: 1 1 Ident 1 ModuleIdent 1 QualIdent 1 isQualified 1 mkIdent 1 qualify 1 selectorId 1 unqualify 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Base :: 1 1 1 EvalEnv 1 QualExpr 1 QuantExpr 1 ValueEnv 1 ValueInfo 1 bindFun 1 internalError 1 qualLookupValue 1 zdfQualExprAlt 1 zdfQualExprDecl 1 zdfQualExprEquation 1 zdfQualExprExpression 1 zdfQualExprRhs 1 zdfQualExprZMZN 1 zdfQuantExprConstrTerm 1 zdfQuantExprDecl 1 zdfQuantExprLhs 1 zdfQuantExprZMZN 1 zdfShowValueInfo 1;
import CurrySyntax :: 1 1 Alt 1 CallConv 1 CondExpr 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Equation 1 EvalAnnotation 1 Export 1 ExportSpec 1 Expression 1 Import 1 ImportSpec 1 Infix 1 InfixOp 1 Lhs 1 Literal 1 Module 1 NewConstrDecl 1 Qualified 1 Rhs 1 Statement 1 TypeExpr 1 zdfEqAlt 1 zdfEqConstrTerm 1 zdfEqDecl 1 zdfEqEquation 1 zdfEqEvalAnnotation 1 zdfEqExportSpec 1 zdfEqExpression 1 zdfEqLhs 1 zdfEqLiteral 1 zdfEqModule 1 zdfEqRhs 1 zdfShowAlt 1 zdfShowConstrTerm 1 zdfShowDecl 1 zdfShowEquation 1 zdfShowEvalAnnotation 1 zdfShowExportSpec 1 zdfShowExpression 1 zdfShowLhs 1 zdfShowLiteral 1 zdfShowModule 1 zdfShowRhs 1;
import Combined :: 1 1 1 Id 1 ReaderT 1 St 1 StateT 1 callRt 1 callSt 1 envRt 1 fetchSt 1 liftRt 1 liftSt 1 runSt 1 updateSt 1 updateStzu 1 zdfMonadId 1 zdfMonadReaderT 1 zdfMonadStateT 1;
import SCC :: 1 1 1 scc 1;
import Typing :: 1 1 1 Typeable 1 zdfTypeableConstrTerm 1 zdfTypeableExpression 1 zdfTypeableIdent 1 zdfTypeableRhs 1;
import Position :: 1 1 Position 1 zdfEqPosition 1 zdfOrdPosition 1 zdfShowPosition 1;
import TopEnv :: 1 1 Source 1 TopEnv 1 zdfShowTopEnv 1;
import Types :: 1 1 ExistTypeScheme 1 Type 1 TypeScheme 1 arrowArity 1 monoType 1 polyType 1 zdfEqType 1 zdfEqTypeScheme 1 zdfShowType 1 zdfShowTypeScheme 1;
import Map :: 1 1 FM 1;
import Prelude :: 1;
import Monad :: 1;
import PrelMaybe :: 1;
;
simplify :: PrelBase.Bool -> Base.ValueEnv -> Base.EvalEnv -> CurrySyntax.Module -> (CurrySyntax.Module, Base.ValueEnv);
type SimplifyState a = Combined.StateT Base.ValueEnv (Combined.ReaderT Base.EvalEnv (Combined.StateT PrelBase.Int Combined.Id)) a;
type InlineEnv = Env.Env Ident.Ident CurrySyntax.Expression;
