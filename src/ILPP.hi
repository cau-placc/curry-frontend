__interface "Main" ILPP 1 500 where
__export  ILPP altIndent bodyIndent caseIndent dataIndent exprIndent ppAlt ppBinding ppConstr ppConstrTerm ppDecl ppExpr ppIdent ppImport ppInfixApp ppLiteral ppModule ppName ppParen ppQIdent ppQInfixOp ppQual ppType ppTypeLhs ppTypeSig typeVars;
__export  Pretty Doc;
import PrelReal;
import Char;
import PrelMaybe;
import Ratio;
import List;
import Ident :: 1 1 1 Ident 1 ModuleIdent 1 QualIdent 1 isInfixOp 1 isQInfixOp 1 isQTupleId 1 name 1 nilId 1 qualName 1 unqualify 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import PrelBase ! :: 1;
import PrelFloat :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelEnum :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Pretty :: 1 1 1 Doc 1 TextDetails 1 brackets 1 char 1 comma 1 double 1 equals 1 fsep 1 hsep 1 int 1 nest 1 parens 1 punctuate 1 sep 1 text 1 vcat 1 zdfShowDoc 1 zdzd 1 zlzg 1 zlzpzg 1;
import IL :: 1 1 1 Alt 1 Binding 1 CallConv 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Eval 1 Expression 1 Literal 1 Module 1 Type 1 zdfEqAlt 1 zdfEqBinding 1 zdfEqCallConv 1 zdfEqConstrDecl 1 zdfEqConstrTerm 1 zdfEqDecl 1 zdfEqEval 1 zdfEqExpression 1 zdfEqLiteral 1 zdfEqModule 1 zdfEqType 1 zdfShowAlt 1 zdfShowBinding 1 zdfShowCallConv 1 zdfShowConstrDecl 1 zdfShowConstrTerm 1 zdfShowDecl 1 zdfShowEval 1 zdfShowExpression 1 zdfShowLiteral 1 zdfShowModule 1 zdfShowType 1;
;
typeVars :: [PrelBase.String];
ppParen :: PrelBase.Bool -> Pretty.Doc -> Pretty.Doc;
ppQual :: Ident.QualIdent -> Pretty.Doc;
ppName :: Ident.Ident -> Pretty.Doc;
ppQInfixOp :: Ident.QualIdent -> Pretty.Doc;
ppQIdent :: Ident.QualIdent -> Pretty.Doc;
ppIdent :: Ident.Ident -> Pretty.Doc;
ppInfixApp :: PrelBase.Int -> IL.Expression -> Ident.QualIdent -> IL.Expression -> Pretty.Doc;
ppExpr :: PrelBase.Int -> IL.Expression -> Pretty.Doc;
ppConstrTerm :: IL.ConstrTerm -> Pretty.Doc;
ppLiteral :: IL.Literal -> Pretty.Doc;
ppAlt :: IL.Alt -> Pretty.Doc;
ppBinding :: IL.Binding -> Pretty.Doc;
ppType :: PrelBase.Int -> IL.Type -> Pretty.Doc;
ppTypeSig :: Ident.QualIdent -> IL.Type -> Pretty.Doc;
ppConstr :: IL.ConstrDecl [IL.Type] -> Pretty.Doc;
ppTypeLhs :: Ident.QualIdent -> PrelBase.Int -> Pretty.Doc;
ppDecl :: IL.Decl -> Pretty.Doc;
ppImport :: Ident.ModuleIdent -> Pretty.Doc;
ppModule :: IL.Module -> Pretty.Doc;
altIndent :: PrelBase.Int;
caseIndent :: PrelBase.Int;
exprIndent :: PrelBase.Int;
bodyIndent :: PrelBase.Int;
dataIndent :: PrelBase.Int;
