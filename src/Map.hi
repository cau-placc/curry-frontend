__interface "Main" Map 1 500 where
__export  Map FM addToFM deleteFromFM fromListFM lookupFM nullFM toListFM unitFM zzeroFM;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelShow :: 1;
import PrelMaybe :: 1;
import List :: 1;
;
instance __forall a (PrelBase.Ord a) => {PrelBase.Functor (FM a)} = zdfFunctorFM ;
instance __forall a b (PrelBase.Ord a, PrelShow.Show a, PrelShow.Show b) => {PrelShow.Show (FM a b)} = zdfShowFM ;
instance __forall a b (PrelBase.Ord a, PrelBase.Eq b) => {PrelBase.Eq (FM a b)} = zdfEqFM ;
toListFM :: __forall a b (PrelBase.Ord a) => FM a b -> [(a, b)];
lookupFM :: __forall a b (PrelBase.Ord a) => a -> FM a b -> PrelMaybe.Maybe b;
deleteFromFM :: __forall a b (PrelBase.Ord a) => a -> FM a b -> FM a b;
fromListFM :: __forall a b (PrelBase.Ord a) => [(a, b)] -> FM a b;
addToFM :: __forall a b (PrelBase.Ord a) => a -> b -> FM a b -> FM a b;
unitFM :: __forall a b (PrelBase.Ord a) => a -> b -> FM a b;
zzeroFM :: __forall a b (PrelBase.Ord a) => FM a b;
nullFM :: __forall a b (PrelBase.Ord a) => FM a b -> PrelBase.Bool;
data FM a b = Empty | Node2 (FM a b) (a, b) (FM a b) | Node3 (FM a b) (a, b) (FM a b) (a, b) (FM a b);
zdfFunctorFM :: __forall a (PrelBase.Ord a) => {PrelBase.Functor (FM a)};
zdfShowFM :: __forall a b (PrelBase.Ord a, PrelShow.Show a, PrelShow.Show b) => {PrelShow.Show (FM a b)};
zdfEqFM :: __forall a b (PrelBase.Ord a, PrelBase.Eq b) => {PrelBase.Eq (FM a b)};
