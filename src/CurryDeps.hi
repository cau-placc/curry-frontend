__interface "Main" CurryDeps 1 500 where
__export  CurryDeps Source{Interface Source Unknown} SourceEnv buildScript curryExt cyclicError debugExt deps flatExt flatName flattenDeps icurryExt imports interfName lcurryExt lookupModule makeBuildScript makeCleanScript makeDepend makeDeps moduleDeps moduleExts oExt objectExts objectName sortDeps sourceDeps sourceExts targetDeps unlitLiterate;
import Char;
import PrelReal;
import PrelEnum;
import CurryLexer;
import LLParseComb;
import Directory;
import Set;
import LexComb;
import Maybe :: 1;
import IO :: 1;
import Env :: 1 1 1 Env 1 bindEnv 1 emptyEnv 1 envToList 1 lookupEnv 1 zdfFunctorEnv 1 zdfShowEnv 1;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import PrelIO :: 1;
import PrelMaybe :: 1;
import Ident :: 1 1 1 Ident 1 ModuleIdent 1 QualIdent 1 mkMIdent 1 moduleQualifiers 1 preludeMIdent 1 zdfEqModuleIdent 1 zdfOrdModuleIdent 1 zdfShowModuleIdent 1;
import CurrySyntax :: 1 1 1 Alt 1 CallConv 1 CondExpr 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Equation 1 EvalAnnotation 1 Export 1 ExportSpec 1 Expression 1 Import 1 ImportSpec 1 Infix 1 InfixOp 1 Lhs 1 Literal 1 Module 1 NewConstrDecl 1 Qualified 1 Rhs 1 Statement 1 TypeExpr 1 zdfEqDecl 1 zdfEqExportSpec 1 zdfEqImportSpec 1 zdfEqModule 1 zdfShowDecl 1 zdfShowExportSpec 1 zdfShowImportSpec 1 zdfShowModule 1;
import SCC :: 1 1 1 scc 1;
import Unlit :: 1 1 1 unlit 1;
import CurryParser ! :: 1 1 parseHeader 1;
import Error :: 1 1 1 Error 1 zdfEqError 1 zdfFunctorError 1 zdfMonadError 1 zdfOrdError 1 zdfShowError 1;
import PathUtils :: 1 1 1 catPath 1 extension 1 lookupFile 1 rootname 1;
import Position :: 1 1 Position 1 zdfEqPosition 1 zdfOrdPosition 1 zdfShowPosition 1;
import Map :: 1 1 FM 1;
import List :: 1;
import Monad :: 1;
;
instance {PrelBase.Eq Source} = zdfEqSource ;
instance {PrelBase.Ord Source} = zdfOrdSource ;
instance {PrelShow.Show Source} = zdfShowSource ;
moduleExts :: [PrelBase.String];
objectExts :: [PrelBase.String];
sourceExts :: [PrelBase.String];
debugExt :: [PrelBase.Char];
oExt :: PrelBase.String;
flatExt :: [PrelBase.Char];
icurryExt :: PrelBase.String;
lcurryExt :: PrelBase.String;
curryExt :: PrelBase.String;
objectName :: PrelBase.Bool -> PrelIOBase.FilePath -> PrelIOBase.FilePath;
flatName :: PrelIOBase.FilePath -> PrelIOBase.FilePath;
interfName :: PrelIOBase.FilePath -> PrelIOBase.FilePath;
makeCleanScript :: PrelBase.Bool -> PrelBase.Bool -> PrelBase.Bool -> PrelMaybe.Maybe PrelIOBase.FilePath -> [(Ident.ModuleIdent, Source)] -> PrelBase.String;
makeBuildScript :: PrelBase.Bool -> PrelBase.Bool -> PrelBase.Bool -> PrelMaybe.Maybe PrelIOBase.FilePath -> [(Ident.ModuleIdent, Source)] -> PrelBase.String;
cyclicError :: [Ident.ModuleIdent] -> PrelBase.String;
flattenDeps :: [[(Ident.ModuleIdent, Source)]] -> ([(Ident.ModuleIdent, Source)], [PrelBase.String]);
sortDeps :: SourceEnv -> [[(Ident.ModuleIdent, Source)]];
makeDeps :: PrelBase.Bool -> SourceEnv -> PrelBase.String;
unlitLiterate :: PrelIOBase.FilePath -> PrelBase.String -> PrelBase.String;
imports :: Ident.ModuleIdent -> [CurrySyntax.Decl] -> [Ident.ModuleIdent];
sourceDeps :: [PrelIOBase.FilePath] -> [PrelIOBase.FilePath] -> Ident.ModuleIdent -> SourceEnv -> PrelIOBase.FilePath -> PrelIOBase.IO SourceEnv;
moduleDeps :: [PrelIOBase.FilePath] -> [PrelIOBase.FilePath] -> SourceEnv -> Ident.ModuleIdent -> PrelIOBase.IO SourceEnv;
lookupModule :: [PrelIOBase.FilePath] -> [PrelIOBase.FilePath] -> Ident.ModuleIdent -> PrelIOBase.IO (PrelMaybe.Maybe PrelIOBase.FilePath);
targetDeps :: [PrelIOBase.FilePath] -> [PrelIOBase.FilePath] -> SourceEnv -> PrelIOBase.FilePath -> PrelIOBase.IO SourceEnv;
deps :: [PrelIOBase.FilePath] -> [PrelIOBase.FilePath] -> SourceEnv -> PrelIOBase.FilePath -> PrelIOBase.IO SourceEnv;
makeDepend :: [PrelIOBase.FilePath] -> [PrelIOBase.FilePath] -> PrelMaybe.Maybe PrelIOBase.FilePath -> [PrelIOBase.FilePath] -> PrelIOBase.IO ();
buildScript :: PrelBase.Bool -> PrelBase.Bool -> PrelBase.Bool -> [PrelIOBase.FilePath] -> [PrelIOBase.FilePath] -> PrelMaybe.Maybe PrelIOBase.FilePath -> PrelIOBase.FilePath -> PrelIOBase.IO [PrelBase.String];
data Source = Source PrelIOBase.FilePath [Ident.ModuleIdent] | Interface PrelIOBase.FilePath | Unknown;
type SourceEnv = Env.Env Ident.ModuleIdent Source;
zdfShowSource :: {PrelShow.Show Source};
zdfEqSource :: {PrelBase.Eq Source};
zdfOrdSource :: {PrelBase.Ord Source};
