__interface "Main" Set 1 500 where
__export  Set Set{Set} addToSet deleteFromSet diffSet domainFM elemSet fromListSet intersectionSet mapSet notElemSet nullSet subsetSet symDiffSet toListSet unionSet unionSets unitSet zzeroSet;
import PrelNum;
import PrelBase ! :: 1;
import PrelTup :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Map :: 1 1 1 FM 1 addToFM 1 deleteFromFM 1 lookupFM 1 toListFM 1 unitFM 1 zdfEqFM 1 zdfFunctorFM 1 zdfShowFM 1 zzeroFM 1;
import List :: 1;
import Maybe :: 1;
import PrelMaybe :: 1;
infixl 6 symDiffSet infixl 6 diffSet infixl 7 intersectionSet infixl 7 unionSet infix 4 subsetSet infix 4 notElemSet infix 4 elemSet infixl 8 deleteFromSet infixl 8 addToSet;
instance __forall a (PrelBase.Ord a, PrelShow.Show a) => {PrelShow.Show (Set a)} = zdfShowSet ;
instance __forall a (PrelBase.Ord a) => {PrelBase.Eq (Set a)} = zdfEqSet ;
mapSet :: __forall a b (PrelBase.Ord a, PrelBase.Ord b) => (a -> b) -> Set a -> Set b;
domainFM :: __forall a b (PrelBase.Ord a) => Map.FM a b -> Set a;
symDiffSet :: __forall a (PrelBase.Ord a) => Set a -> Set a -> Set a;
diffSet :: __forall a (PrelBase.Ord a) => Set a -> Set a -> Set a;
intersectionSet :: __forall a (PrelBase.Ord a) => Set a -> Set a -> Set a;
unionSets :: __forall a (PrelBase.Ord a) => [Set a] -> Set a;
unionSet :: __forall a (PrelBase.Ord a) => Set a -> Set a -> Set a;
toListSet :: __forall a (PrelBase.Ord a) => Set a -> [a];
fromListSet :: __forall a (PrelBase.Ord a) => [a] -> Set a;
subsetSet :: __forall a (PrelBase.Ord a) => Set a -> Set a -> PrelBase.Bool;
notElemSet :: __forall a (PrelBase.Ord a) => a -> Set a -> PrelBase.Bool;
elemSet :: __forall a (PrelBase.Ord a) => a -> Set a -> PrelBase.Bool;
deleteFromSet :: __forall a (PrelBase.Ord a) => a -> Set a -> Set a;
addToSet :: __forall a (PrelBase.Ord a) => a -> Set a -> Set a;
unitSet :: __forall a (PrelBase.Ord a) => a -> Set a;
zzeroSet :: __forall a (PrelBase.Ord a) => Set a;
nullSet :: __forall a (PrelBase.Ord a) => Set a -> PrelBase.Bool;
newtype Set a = Set (Map.FM a ());
zdfShowSet :: __forall a (PrelBase.Ord a, PrelShow.Show a) => {PrelShow.Show (Set a)};
zdfEqSet :: __forall a (PrelBase.Ord a) => {PrelBase.Eq (Set a)};
