__interface "Main" CurryPP 1 500 where
__export  CurryPP backQuote backQuoteExp backsl braceList bracketList indent larrow list maybePP parenExp parenList ppAlt ppBlock ppCondExpr ppConstr ppConstrTerm ppDecl ppEquation ppExistVars ppExport ppExportSpec ppExpr ppGoal ppIDecl ppITypeDeclLhs ppIdent ppImport ppImportSpec ppInfixOp ppInterface ppLhs ppLiteral ppLocalDefs ppMIdent ppModule ppModuleHeader ppNewConstr ppOp ppPrec ppQIdent ppQInfixOp ppRule ppStmt ppTypeDeclLhs ppTypeExpr rarrow vbar;
__export  Pretty Doc;
import Char;
import List;
import Ratio;
import PrelBase ! :: 1;
import PrelFloat :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelReal :: 1;
import PrelEnum :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Ident :: 1 1 1 Ident 1 ModuleIdent 1 QualIdent 1 isInfixOp 1 isQInfixOp 1 moduleName 1 name 1 qualName 1 qualify 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import CurrySyntax :: 1 1 1 Alt 1 CallConv 1 CondExpr 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Equation 1 EvalAnnotation 1 Export 1 ExportSpec 1 Expression 1 Goal 1 IDecl 1 Import 1 ImportSpec 1 Infix 1 InfixOp 1 Interface 1 Lhs 1 Literal 1 Module 1 NewConstrDecl 1 Qualified 1 Rhs 1 Statement 1 TypeExpr 1 opName 1 zdfEqAlt 1 zdfEqCallConv 1 zdfEqCondExpr 1 zdfEqConstrDecl 1 zdfEqConstrTerm 1 zdfEqDecl 1 zdfEqEquation 1 zdfEqEvalAnnotation 1 zdfEqExport 1 zdfEqExportSpec 1 zdfEqExpression 1 zdfEqGoal 1 zdfEqIDecl 1 zdfEqImport 1 zdfEqImportSpec 1 zdfEqInfix 1 zdfEqInfixOp 1 zdfEqInterface 1 zdfEqLhs 1 zdfEqLiteral 1 zdfEqModule 1 zdfEqNewConstrDecl 1 zdfEqRhs 1 zdfEqStatement 1 zdfEqTypeExpr 1 zdfShowAlt 1 zdfShowCallConv 1 zdfShowCondExpr 1 zdfShowConstrDecl 1 zdfShowConstrTerm 1 zdfShowDecl 1 zdfShowEquation 1 zdfShowEvalAnnotation 1 zdfShowExport 1 zdfShowExportSpec 1 zdfShowExpression 1 zdfShowGoal 1 zdfShowIDecl 1 zdfShowImport 1 zdfShowImportSpec 1 zdfShowInfix 1 zdfShowInfixOp 1 zdfShowInterface 1 zdfShowLhs 1 zdfShowLiteral 1 zdfShowModule 1 zdfShowNewConstrDecl 1 zdfShowRhs 1 zdfShowStatement 1 zdfShowTypeExpr 1;
import Pretty :: 1 1 1 Doc 1 TextDetails 1 braces 1 brackets 1 char 1 comma 1 double 1 empty 1 equals 1 fsep 1 hsep 1 int 1 lbrace 1 nest 1 parens 1 punctuate 1 rbrace 1 semi 1 sep 1 text 1 vcat 1 zdfShowDoc 1 zdzd 1 zlzg 1 zlzpzg 1;
import PrelMaybe :: 1;
import Position :: 1 1 Position 1 zdfEqPosition 1 zdfOrdPosition 1 zdfShowPosition 1;
;
rarrow :: Pretty.Doc;
larrow :: Pretty.Doc;
vbar :: Pretty.Doc;
backsl :: Pretty.Doc;
backQuote :: Pretty.Doc;
braceList :: [Pretty.Doc] -> Pretty.Doc;
bracketList :: [Pretty.Doc] -> Pretty.Doc;
parenList :: [Pretty.Doc] -> Pretty.Doc;
list :: [Pretty.Doc] -> Pretty.Doc;
backQuoteExp :: PrelBase.Bool -> Pretty.Doc -> Pretty.Doc;
parenExp :: PrelBase.Bool -> Pretty.Doc -> Pretty.Doc;
maybePP :: __forall a => (a -> Pretty.Doc) -> PrelMaybe.Maybe a -> Pretty.Doc;
indent :: Pretty.Doc -> Pretty.Doc;
ppMIdent :: Ident.ModuleIdent -> Pretty.Doc;
ppQInfixOp :: Ident.QualIdent -> Pretty.Doc;
ppInfixOp :: Ident.Ident -> Pretty.Doc;
ppQIdent :: Ident.QualIdent -> Pretty.Doc;
ppIdent :: Ident.Ident -> Pretty.Doc;
ppGoal :: CurrySyntax.Goal -> Pretty.Doc;
ppOp :: CurrySyntax.InfixOp -> Pretty.Doc;
ppAlt :: CurrySyntax.Alt -> Pretty.Doc;
ppStmt :: CurrySyntax.Statement -> Pretty.Doc;
ppExpr :: PrelBase.Int -> CurrySyntax.Expression -> Pretty.Doc;
ppCondExpr :: Pretty.Doc -> CurrySyntax.CondExpr -> Pretty.Doc;
ppConstrTerm :: PrelBase.Int -> CurrySyntax.ConstrTerm -> Pretty.Doc;
ppLiteral :: CurrySyntax.Literal -> Pretty.Doc;
ppTypeExpr :: PrelBase.Int -> CurrySyntax.TypeExpr -> Pretty.Doc;
ppITypeDeclLhs :: PrelBase.String -> Ident.QualIdent -> [Ident.Ident] -> Pretty.Doc;
ppIDecl :: CurrySyntax.IDecl -> Pretty.Doc;
ppInterface :: CurrySyntax.Interface -> Pretty.Doc;
ppLocalDefs :: [CurrySyntax.Decl] -> Pretty.Doc;
ppRule :: Pretty.Doc -> Pretty.Doc -> CurrySyntax.Rhs -> Pretty.Doc;
ppLhs :: CurrySyntax.Lhs -> Pretty.Doc;
ppEquation :: CurrySyntax.Equation -> Pretty.Doc;
ppExistVars :: [Ident.Ident] -> Pretty.Doc;
ppNewConstr :: CurrySyntax.NewConstrDecl -> Pretty.Doc;
ppConstr :: CurrySyntax.ConstrDecl -> Pretty.Doc;
ppTypeDeclLhs :: PrelBase.String -> Ident.Ident -> [Ident.Ident] -> Pretty.Doc;
ppPrec :: CurrySyntax.Infix -> PrelBase.Int -> Pretty.Doc;
ppImport :: CurrySyntax.Import -> Pretty.Doc;
ppImportSpec :: CurrySyntax.ImportSpec -> Pretty.Doc;
ppDecl :: CurrySyntax.Decl -> Pretty.Doc;
ppBlock :: [CurrySyntax.Decl] -> Pretty.Doc;
ppExport :: CurrySyntax.Export -> Pretty.Doc;
ppExportSpec :: CurrySyntax.ExportSpec -> Pretty.Doc;
ppModuleHeader :: Ident.ModuleIdent -> PrelMaybe.Maybe CurrySyntax.ExportSpec -> Pretty.Doc;
ppModule :: CurrySyntax.Module -> Pretty.Doc;
