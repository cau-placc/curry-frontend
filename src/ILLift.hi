__interface "Main" ILLift 1 500 where
__export  ILLift LiftState fv lift liftAlt liftArg liftBinding liftConstr liftData liftExpr liftNewtype liftProg mapLift typeConstr uniqueName;
import PrelIOBase;
import PrelArr;
import Char;
import PrelConc;
import IO;
import PrelMaybe;
import Error;
import IORef;
import IOExts;
import Ident :: 1 1 1 Ident 1 ModuleIdent 1 QualIdent 1 mkIdent 1 qualifyWith 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelEnum :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import IL :: 1 1 1 Alt 1 Binding 1 CallConv 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Eval 1 Expression 1 Literal 1 Module 1 Type 1 zdfEqAlt 1 zdfEqBinding 1 zdfEqConstrDecl 1 zdfEqConstrTerm 1 zdfEqDecl 1 zdfEqEval 1 zdfEqExpression 1 zdfEqLiteral 1 zdfEqModule 1 zdfEqType 1 zdfShowAlt 1 zdfShowBinding 1 zdfShowConstrDecl 1 zdfShowConstrTerm 1 zdfShowDecl 1 zdfShowEval 1 zdfShowExpression 1 zdfShowLiteral 1 zdfShowModule 1 zdfShowType 1;
import Combined :: 1 1 1 Id 1 St 1 StateT 1 runSt 1 updateSt 1 zdfMonadId 1 zdfMonadStateT 1;
import Utils :: 1 1 1 apSnd 1;
import Prelude :: 1;
import List :: 1;
import Monad :: 1;
;
typeConstr :: Ident.QualIdent -> PrelBase.Int -> IL.Type;
fv :: IL.Expression -> [Ident.Ident];
uniqueName :: LiftState Ident.QualIdent;
mapLift :: __forall a => (a -> LiftState (a, [IL.Decl])) -> [a] -> LiftState ([a], [IL.Decl]);
liftBinding :: IL.Binding -> LiftState (IL.Binding, [IL.Decl]);
liftAlt :: IL.Alt -> LiftState (IL.Alt, [IL.Decl]);
liftArg :: IL.Expression -> LiftState (IL.Expression, [IL.Decl]);
liftExpr :: IL.Expression -> LiftState (IL.Expression, [IL.Decl]);
liftNewtype :: Ident.QualIdent -> PrelBase.Int -> IL.ConstrDecl IL.Type -> IL.Decl;
liftConstr :: IL.Type -> IL.ConstrDecl [IL.Type] -> IL.Decl;
liftData :: Ident.QualIdent -> PrelBase.Int -> [IL.ConstrDecl [IL.Type]] -> [IL.Decl];
lift :: IL.Decl -> LiftState [IL.Decl];
liftProg :: IL.Module -> IL.Module;
type LiftState a = Combined.St [Ident.QualIdent] a;
