__interface "Main" FlatInfo 1 500 where
__export  FlatInfo FlatInfo FlatOpInfo genFlatInfo getFlatExport getFlatOpInfo getOpFixity getOpIdent getOpPrec isInfix isInfixL isInfixR;
import PrelNum;
import PrelReal;
import PrelEnum;
import PrelShow;
import Char;
import List;
import PrelBase ! :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelList :: 1;
import CurrySyntax :: 1 1 1 Alt 1 CallConv 1 CondExpr 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Equation 1 EvalAnnotation 1 Export 1 ExportSpec 1 Expression 1 Import 1 ImportSpec 1 Infix 1 InfixOp 1 Lhs 1 Literal 1 Module 1 NewConstrDecl 1 Qualified 1 Rhs 1 Statement 1 TypeExpr 1 zdfEqCallConv 1 zdfEqConstrDecl 1 zdfEqConstrTerm 1 zdfEqDecl 1 zdfEqEquation 1 zdfEqEvalAnnotation 1 zdfEqExport 1 zdfEqExportSpec 1 zdfEqImportSpec 1 zdfEqInfix 1 zdfEqModule 1 zdfEqNewConstrDecl 1 zdfEqRhs 1 zdfEqTypeExpr 1;
import Ident :: 1 1 1 Ident 1 ModuleIdent 1 QualIdent 1 localIdent 1 name 1 unqualify 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1;
import Maybe :: 1;
import PrelMaybe :: 1;
import Position :: 1 1 Position 1 zdfEqPosition 1;
;
isInfixR :: FlatOpInfo -> PrelBase.Bool;
isInfixL :: FlatOpInfo -> PrelBase.Bool;
isInfix :: FlatOpInfo -> PrelBase.Bool;
getOpFixity :: FlatOpInfo -> CurrySyntax.Infix;
getOpPrec :: FlatOpInfo -> PrelBase.Int;
getOpIdent :: FlatOpInfo -> Ident.Ident;
getFlatOpInfo :: FlatInfo -> [(Ident.Ident, (CurrySyntax.Infix, PrelBase.Int))];
getFlatExport :: FlatInfo -> [Ident.Ident];
genFlatInfo :: CurrySyntax.Module -> FlatInfo;
data FlatInfo = FlatInfo [Ident.Ident] [FlatOpInfo];
type FlatOpInfo = (Ident.Ident, (CurrySyntax.Infix, PrelBase.Int));
