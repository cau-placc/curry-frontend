__interface "Main" Ident 1 500 where
__export  Ident Ident ModuleIdent QualIdent anonId boolId charId consId emptyMIdent falseId floatId fminusId intId ioId isInfixOp isQInfixOp isQSelectorId isQTupleId isQualified isSelectorId isTupleId listId localIdent mainId mainMIdent minusId mkIdent mkMIdent moduleName moduleQualifiers name nilId preludeMIdent qConsId qFalseId qIOId qNilId qSuccessId qTrueId qTupleArity qTupleId qUnitId qualName qualQualify qualUnqualify qualify qualifyWith renameIdent selectorId splitQualIdent successId trueId tupleArity tupleId unRenameIdent uniqueId unitId unqualify;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Char :: 1;
import List :: 1;
import PrelMaybe :: 1;
;
instance {PrelBase.Eq ModuleIdent} = zdfEqModuleIdent ;
instance {PrelBase.Ord ModuleIdent} = zdfOrdModuleIdent ;
instance {PrelBase.Eq QualIdent} = zdfEqQualIdent ;
instance {PrelBase.Ord QualIdent} = zdfOrdQualIdent ;
instance {PrelBase.Eq Ident} = zdfEqIdent ;
instance {PrelBase.Ord Ident} = zdfOrdIdent ;
instance {PrelShow.Show ModuleIdent} = zdfShowModuleIdent ;
instance {PrelShow.Show QualIdent} = zdfShowQualIdent ;
instance {PrelShow.Show Ident} = zdfShowIdent ;
qTupleArity :: QualIdent -> PrelBase.Int;
isQSelectorId :: QualIdent -> PrelBase.Bool;
isQTupleId :: QualIdent -> PrelBase.Bool;
qTupleId :: PrelBase.Int -> QualIdent;
qIOId :: QualIdent;
qSuccessId :: QualIdent;
qFalseId :: QualIdent;
qTrueId :: QualIdent;
qConsId :: QualIdent;
qNilId :: QualIdent;
qUnitId :: QualIdent;
fminusId :: Ident;
minusId :: Ident;
mainId :: Ident;
isSelectorId :: Ident -> PrelBase.Bool;
selectorId :: PrelBase.Int -> Ident;
tupleArity :: Ident -> PrelBase.Int;
isTupleId :: Ident -> PrelBase.Bool;
tupleId :: PrelBase.Int -> Ident;
consId :: Ident;
nilId :: Ident;
falseId :: Ident;
trueId :: Ident;
successId :: Ident;
ioId :: Ident;
listId :: Ident;
floatId :: Ident;
intId :: Ident;
charId :: Ident;
boolId :: Ident;
unitId :: Ident;
anonId :: Ident;
preludeMIdent :: ModuleIdent;
mainMIdent :: ModuleIdent;
emptyMIdent :: ModuleIdent;
splitQualIdent :: QualIdent -> (PrelMaybe.Maybe ModuleIdent, Ident);
localIdent :: ModuleIdent -> QualIdent -> PrelMaybe.Maybe Ident;
qualUnqualify :: ModuleIdent -> QualIdent -> QualIdent;
unqualify :: QualIdent -> Ident;
isQualified :: QualIdent -> PrelBase.Bool;
qualQualify :: ModuleIdent -> QualIdent -> QualIdent;
qualifyWith :: ModuleIdent -> Ident -> QualIdent;
qualify :: Ident -> QualIdent;
isQInfixOp :: QualIdent -> PrelBase.Bool;
isInfixOp :: Ident -> PrelBase.Bool;
moduleQualifiers :: ModuleIdent -> [PrelBase.String];
moduleName :: ModuleIdent -> PrelBase.String;
mkMIdent :: [PrelBase.String] -> ModuleIdent;
unRenameIdent :: Ident -> Ident;
renameIdent :: Ident -> PrelBase.Int -> Ident;
uniqueId :: Ident -> PrelBase.Int;
qualName :: QualIdent -> PrelBase.String;
name :: Ident -> PrelBase.String;
mkIdent :: PrelBase.String -> Ident;
data Ident = Ident PrelBase.String PrelBase.Int;
data QualIdent = UnqualIdent Ident | QualIdent ModuleIdent Ident;
newtype ModuleIdent = ModuleIdent [PrelBase.String];
zdfEqIdent :: {PrelBase.Eq Ident};
zdfOrdIdent :: {PrelBase.Ord Ident};
zdfEqModuleIdent :: {PrelBase.Eq ModuleIdent};
zdfOrdModuleIdent :: {PrelBase.Ord ModuleIdent};
zdfEqQualIdent :: {PrelBase.Eq QualIdent};
zdfOrdQualIdent :: {PrelBase.Ord QualIdent};
zdfShowModuleIdent :: {PrelShow.Show ModuleIdent};
zdfShowIdent :: {PrelShow.Show Ident};
zdfShowQualIdent :: {PrelShow.Show QualIdent};
