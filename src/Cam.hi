__interface "Main" Cam 1 500 where
__export  Cam Alt Bind{Bind} Case{Case} ConstrDecl{ConstrDecl} Decl{DataDecl FunctionDecl ImportDecl} Expr{Closure Constr Free Lazzy Lit Ref} Literal{Char Float Int} Module Name{Name} RF{Flex Rigid} Stmt{Choices Enter Exec Let Lock Return Seq Switch Update} Tag{ConstrCase DefaultCase LitCase} demangle mangle mangleQualified splitCam splitQualified;
import PrelBase ! :: 1;
import PrelFloat :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelEnum :: 1;
import PrelShow :: 1;
import PrelRead :: 1;
import PrelList :: 1;
import Char :: 1;
;
instance {PrelBase.Eq Name} = zdfEqName ;
instance {PrelBase.Ord Name} = zdfOrdName ;
instance {PrelBase.Eq Tag} = zdfEqTag ;
instance {PrelShow.Show Tag} = zdfShowTag ;
instance {PrelBase.Eq Case} = zdfEqCase ;
instance {PrelShow.Show Case} = zdfShowCase ;
instance {PrelBase.Eq Expr} = zdfEqExpr ;
instance {PrelShow.Show Expr} = zdfShowExpr ;
instance {PrelBase.Eq Literal} = zdfEqLiteral ;
instance {PrelShow.Show Literal} = zdfShowLiteral ;
instance {PrelBase.Eq RF} = zdfEqRF ;
instance {PrelShow.Show RF} = zdfShowRF ;
instance {PrelBase.Eq Bind} = zdfEqBind ;
instance {PrelShow.Show Bind} = zdfShowBind ;
instance {PrelBase.Eq Stmt} = zdfEqStmt ;
instance {PrelShow.Show Stmt} = zdfShowStmt ;
instance {PrelBase.Eq ConstrDecl} = zdfEqConstrDecl ;
instance {PrelShow.Show ConstrDecl} = zdfShowConstrDecl ;
instance {PrelBase.Eq Decl} = zdfEqDecl ;
instance {PrelShow.Show Decl} = zdfShowDecl ;
instance {PrelShow.Show Name} = zdfShowName ;
demangle :: Name -> PrelBase.String;
splitQualified :: PrelBase.String -> (PrelBase.String, PrelBase.String);
mangleQualified :: PrelBase.String -> Name;
mangle :: PrelBase.String -> Name;
splitCam :: Module -> ([Name], [(Name, [ConstrDecl])], [(Name, [Name], Stmt)]);
type Module = [Decl];
data Decl = ImportDecl Name | DataDecl Name [ConstrDecl] | FunctionDecl Name [Name] Stmt;
data ConstrDecl = ConstrDecl Name PrelBase.Int;
data Stmt = Return Name | Enter Name | Exec Name [Name] | Lock Name Stmt | Update Name Name Stmt | Seq Name Stmt Stmt | Let [Bind] Stmt | Switch RF Name [Case] | Choices [Alt];
type Alt = Stmt;
data Bind = Bind Name Expr;
data RF = Rigid | Flex;
data Literal = Char PrelBase.Char | Int PrelBase.Int | Float PrelFloat.Double;
data Expr = Lit Literal | Constr Name [Name] | Closure Name [Name] | Lazzy Name [Name] | Free | Ref Name;
data Case = Case Tag Stmt;
data Tag = LitCase Literal | ConstrCase Name [Name] | DefaultCase;
newtype Name = Name PrelBase.String;
zdfShowRF :: {PrelShow.Show RF};
zdfEqRF :: {PrelBase.Eq RF};
zdfShowLiteral :: {PrelShow.Show Literal};
zdfEqLiteral :: {PrelBase.Eq Literal};
zdfEqName :: {PrelBase.Eq Name};
zdfOrdName :: {PrelBase.Ord Name};
zdfEqConstrDecl :: {PrelBase.Eq ConstrDecl};
zdfEqTag :: {PrelBase.Eq Tag};
zdfEqExpr :: {PrelBase.Eq Expr};
zdfEqBind :: {PrelBase.Eq Bind};
zdfEqCase :: {PrelBase.Eq Case};
zdfEqStmt :: {PrelBase.Eq Stmt};
zdfEqDecl :: {PrelBase.Eq Decl};
zdfShowName :: {PrelShow.Show Name};
zdfShowConstrDecl :: {PrelShow.Show ConstrDecl};
zdfShowTag :: {PrelShow.Show Tag};
zdfShowExpr :: {PrelShow.Show Expr};
zdfShowBind :: {PrelShow.Show Bind};
zdfShowCase :: {PrelShow.Show Case};
zdfShowStmt :: {PrelShow.Show Stmt};
zdfShowDecl :: {PrelShow.Show Decl};
