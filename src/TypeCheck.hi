__interface "Main" TypeCheck 1 500 where
__export  TypeCheck typeCheck typeCheckGoal;
import PrelReal;
import PrelArr;
import Char;
import PrelConc;
import IO;
import Error;
import IORef;
import Ratio;
import IOExts;
import SCC :: 1 1 1 scc 1;
import PrelBase ! :: 1;
import PrelFloat :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelEnum :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Prelude :: 1;
import Base :: 1 1 1 Data 1 Expr 1 QualExpr 1 QuantExpr 1 TCEnv 1 TypeInfo 1 ValueEnv 1 ValueInfo 1 bindFun 1 bindGlobalInfo 1 bindTypeInfo 1 errorAt 1 infixOp 1 internalError 1 isExtraVariables 1 isTypeDecl 1 isValueDecl 1 lookupValue 1 nameSupply 1 ppType 1 ppTypeScheme 1 qualLookupTC 1 qualLookupValue 1 rebindFun 1 toType 1 toTypes 1 zdfExprTypeExpr 1 zdfExprZMZN 1 zdfQualExprAlt 1 zdfQualExprCondExpr 1 zdfQualExprDecl 1 zdfQualExprEquation 1 zdfQualExprExpression 1 zdfQualExprInfixOp 1 zdfQualExprRhs 1 zdfQualExprStatement 1 zdfQualExprZMZN 1 zdfQuantExprConstrTerm 1 zdfQuantExprDecl 1 zdfQuantExprLhs 1 zdfQuantExprStatement 1 zdfQuantExprZMZN 1 zdfShowData 1 zdfShowTypeInfo 1 zdfShowValueInfo 1;
import Pretty :: 1 1 1 Doc 1 TextDetails 1 space 1 text 1 vcat 1 zdfShowDoc 1 zdzd 1 zlzpzg 1;
import CurryPP :: 1 1 1 ppAlt 1 ppConstrTerm 1 ppDecl 1 ppExpr 1 ppIdent 1 ppOp 1 ppStmt 1 ppTypeExpr 1;
import Env :: 1 1 1 Env 1 bindEnv 1 emptyEnv 1 lookupEnv 1 zdfFunctorEnv 1 zdfShowEnv 1;
import TopEnv :: 1 1 1 Source 1 TopEnv 1 localBindings 1 zdfFunctorTopEnv 1 zdfShowTopEnv 1;
import Set :: 1 1 1 Set 1 elemSet 1 fromListSet 1 notElemSet 1 unionSets 1 zdfEqSet 1 zdfShowSet 1;
import Combined :: 1 1 1 Id 1 St 1 StateT 1 callSt 1 fetchSt 1 liftSt 1 runSt 1 updateSt 1 updateStzu 1 zdfFunctorId 1 zdfFunctorStateT 1 zdfMonadId 1 zdfMonadPlusStateT 1 zdfMonadStateT 1;
import TypeSubst :: 1 1 1 SubstType 1 TypeSubst 1 bindVar 1 expandAliasType 1 normalizze 1 zdfSubstTypeExistTypeScheme 1 zdfSubstTypeTopEnv 1 zdfSubstTypeType 1 zdfSubstTypeTypeScheme 1 zdfSubstTypeValueInfo 1;
import Utils :: 1 1 1 foldr2 1;
import List :: 1;
import Monad :: 1;
import Maybe :: 1;
import PrelMaybe :: 1;
import Ident :: 1 1 Ident 1 ModuleIdent 1 QualIdent 1 anonId 1 fminusId 1 localIdent 1 minusId 1 mkMIdent 1 name 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import Position :: 1 1 Position 1 zdfEqPosition 1 zdfOrdPosition 1 zdfShowPosition 1;
import CurrySyntax :: 1 1 Alt 1 CallConv 1 CondExpr 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Equation 1 EvalAnnotation 1 Expression 1 Goal 1 Import 1 ImportSpec 1 Infix 1 InfixOp 1 Lhs 1 Literal 1 NewConstrDecl 1 Qualified 1 Rhs 1 Statement 1 TypeExpr 1 flatLhs 1 zdfEqAlt 1 zdfEqCallConv 1 zdfEqCondExpr 1 zdfEqConstrDecl 1 zdfEqConstrTerm 1 zdfEqDecl 1 zdfEqEquation 1 zdfEqExpression 1 zdfEqGoal 1 zdfEqInfixOp 1 zdfEqLhs 1 zdfEqLiteral 1 zdfEqNewConstrDecl 1 zdfEqRhs 1 zdfEqStatement 1 zdfEqTypeExpr 1 zdfShowAlt 1 zdfShowCallConv 1 zdfShowCondExpr 1 zdfShowConstrDecl 1 zdfShowConstrTerm 1 zdfShowDecl 1 zdfShowEquation 1 zdfShowExpression 1 zdfShowGoal 1 zdfShowInfixOp 1 zdfShowLhs 1 zdfShowLiteral 1 zdfShowNewConstrDecl 1 zdfShowRhs 1 zdfShowStatement 1 zdfShowTypeExpr 1;
import Types :: 1 1 ExistTypeScheme 1 Type 1 TypeScheme 1 boolType 1 charType 1 floatType 1 intType 1 ioType 1 listType 1 monoType 1 polyType 1 stringType 1 successType 1 tupleType 1 typeSkolems 1 typeVars 1 unitType 1 zdfEqExistTypeScheme 1 zdfEqType 1 zdfEqTypeScheme 1 zdfShowExistTypeScheme 1 zdfShowType 1 zdfShowTypeScheme 1;
import Subst :: 1 1 Subst 1 bindSubst 1 compose 1 idSubst 1 zdfShowSubst 1;
import Map :: 1 1 FM 1;
;
typeCheckGoal :: Base.TCEnv -> Base.ValueEnv -> CurrySyntax.Goal -> Base.ValueEnv;
typeCheck :: Ident.ModuleIdent -> Base.TCEnv -> Base.ValueEnv -> [CurrySyntax.Decl] -> (Base.TCEnv, Base.ValueEnv);
type TcState a = Combined.StateT Base.ValueEnv (Combined.StateT TypeSubst.TypeSubst (Combined.StateT PrelBase.Int Combined.Id)) a;
type SigEnv = Env.Env Ident.Ident CurrySyntax.TypeExpr;
