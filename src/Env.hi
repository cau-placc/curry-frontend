__interface "Main" Env 1 500 where
__export  Env Env{Env} bindEnv emptyEnv envSizze envToList environment lookupEnv unbindEnv;
import List;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Map :: 1 1 1 FM 1 addToFM 1 deleteFromFM 1 lookupFM 1 toListFM 1 zdfEqFM 1 zdfFunctorFM 1 zdfShowFM 1 zzeroFM 1;
import PrelMaybe :: 1;
;
instance __forall a b (PrelBase.Ord a, PrelShow.Show a, PrelShow.Show b) => {PrelShow.Show (Env a b)} = zdfShowEnv ;
instance __forall a (PrelBase.Ord a) => {PrelBase.Functor (Env a)} = zdfFunctorEnv ;
lookupEnv :: __forall v e (PrelBase.Ord v) => v -> Env v e -> PrelMaybe.Maybe e;
envSizze :: __forall v e (PrelBase.Ord v) => Env v e -> PrelBase.Int;
unbindEnv :: __forall v e (PrelBase.Ord v) => v -> Env v e -> Env v e;
bindEnv :: __forall v e (PrelBase.Ord v) => v -> e -> Env v e -> Env v e;
envToList :: __forall v e (PrelBase.Ord v) => Env v e -> [(v, e)];
environment :: __forall a b (PrelBase.Ord a) => [(a, b)] -> Env a b;
emptyEnv :: __forall a b (PrelBase.Ord a) => Env a b;
newtype Env a b = Env (Map.FM a b);
zdfShowEnv :: __forall a b (PrelBase.Ord a, PrelShow.Show a, PrelShow.Show b) => {PrelShow.Show (Env a b)};
zdfFunctorEnv :: __forall a (PrelBase.Ord a) => {PrelBase.Functor (Env a)};
