__interface "Main" CCode 1 500 where
__export  CCode CBlock CCase{CCase CDefault} CConst{CConst} CExpr{CAdd CAddr CCast CDiv CElem CExpr CField CFloat CFunCall CInt CMod CMul CRel CShift CString CSub} CFile CInitializzer{CInit CStruct} CStmt{CAssign CBlock CBreak CContinue CDecrBy CGoto CIf CIncrBy CLabel CLocalVar CLoop CProcCall CReturn CStaticArray CSwitch CTrace CppCondStmts} CTopDecl{CArrayDef CEnumDecl CExternArrayDecl CExternVarDecl CFuncDecl CFuncDef CMainFunc CVarDef CppCondDecls CppInclude} CVisibility{CPrivate CPublic} LVar{LElem LField LVar} mergeCFile;
import PrelBase ! :: 1;
import PrelFloat :: 1;
import List :: 1;
import Maybe :: 1;
import PrelMaybe :: 1;
infixr 8 CCast infixl 5 CShift infixl 7 CMod infixl 7 CDiv infixl 7 CMul infixl 6 CSub infixl 6 CAdd infixl 9 CField infixl 9 CElem;
instance {PrelBase.Eq CExpr} = zdfEqCExpr ;
instance {PrelBase.Eq CCase} = zdfEqCCase ;
instance {PrelBase.Eq LVar} = zdfEqLVar ;
instance {PrelBase.Eq CStmt} = zdfEqCStmt ;
instance {PrelBase.Eq CInitializzer} = zdfEqCInitializzer ;
instance {PrelBase.Eq CConst} = zdfEqCConst ;
instance {PrelBase.Eq CVisibility} = zdfEqCVisibility ;
instance {PrelBase.Eq CTopDecl} = zdfEqCTopDecl ;
type CFile = [CTopDecl];
mergeCFile :: CFile -> CFile -> CFile;
data CTopDecl = CppInclude PrelBase.String | CppCondDecls PrelBase.String [CTopDecl] | CExternVarDecl PrelBase.String PrelBase.String | CExternArrayDecl PrelBase.String PrelBase.String | CEnumDecl [CConst] | CFuncDecl CVisibility PrelBase.String | CVarDef CVisibility PrelBase.String PrelBase.String CInitializzer | CArrayDef CVisibility PrelBase.String PrelBase.String [CInitializzer] | CFuncDef CVisibility PrelBase.String CBlock | CMainFunc PrelBase.String [PrelBase.String] CBlock;
data CVisibility = CPublic | CPrivate;
data CConst = CConst PrelBase.String (PrelMaybe.Maybe PrelBase.Int);
data CInitializzer = CInit CExpr | CStruct [CInitializzer];
type CBlock = [CStmt];
data CStmt = CLocalVar PrelBase.String PrelBase.String (PrelMaybe.Maybe CExpr) | CStaticArray PrelBase.String PrelBase.String [CInitializzer] | CppCondStmts PrelBase.String [CStmt] [CStmt] | CBlock CBlock | CAssign LVar CExpr | CIncrBy LVar CExpr | CDecrBy LVar CExpr | CProcCall PrelBase.String [CExpr] | CIf CExpr [CStmt] [CStmt] | CSwitch CExpr [CCase] | CLoop [CStmt] | CBreak | CContinue | CReturn CExpr | CLabel PrelBase.String | CGoto PrelBase.String | CTrace PrelBase.String [CExpr];
data LVar = LVar PrelBase.String | LElem LVar CExpr | LField LVar PrelBase.String;
data CCase = CCase PrelBase.String [CStmt] | CDefault [CStmt];
data CExpr = CInt PrelBase.Int | CFloat PrelFloat.Double | CString PrelBase.String | CElem CExpr CExpr | CField CExpr PrelBase.String | CFunCall PrelBase.String [CExpr] | CAdd CExpr CExpr | CSub CExpr CExpr | CMul CExpr CExpr | CDiv CExpr CExpr | CMod CExpr CExpr | CShift CExpr PrelBase.Int | CRel CExpr PrelBase.String CExpr | CAddr CExpr | CCast PrelBase.String CExpr | CExpr PrelBase.String;
zdfEqCVisibility :: {PrelBase.Eq CVisibility};
zdfEqCConst :: {PrelBase.Eq CConst};
zdfEqCExpr :: {PrelBase.Eq CExpr};
zdfEqLVar :: {PrelBase.Eq LVar};
zdfEqCInitializzer :: {PrelBase.Eq CInitializzer};
zdfEqCCase :: {PrelBase.Eq CCase};
zdfEqCStmt :: {PrelBase.Eq CStmt};
zdfEqCTopDecl :: {PrelBase.Eq CTopDecl};
