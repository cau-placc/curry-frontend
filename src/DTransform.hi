__interface "Main" DTransform 1 500 where
__export  DTransform DebugTypeList SecondPhaseResult SymbolType{IsConstructor IsExternal IsFunction IsNewConstructor} buildLetExp buildLetrecExp changeFunctionqId collectSymbolTypes createApply createEmptyNode createTree dAddMain dEvalApply dEvalId dTransform debugAuxiliary debugBuildList debugBuildPairExp debugClean debugDecls debugFirstPhase debugFunction debugFunctionName debugFunctionqId debugIdentCons debugIdentNil debugIdentPair debugIdentTuple debugNil debugPrefix debugPreludeModule debugPreludeName debugQualPrelude debugQualPreludeName debugRenameId debugSplitDecls debugTry debugTypeCTree debugTypeChar debugTypeCleanTree debugTypeLCTree debugTypeLCleanTree debugTypeList debugTypeMainAux debugTypePair debugTypePredef debugTypeString debugTypeTuple decomposeExp emptyNode extractApply extractBindings extractBindingsAlts extractBindingsApply extractBindingsBinding extractBindingsLBindings extractBindingsList extractLets firstPhaseBinding firstPhaseExp firstPhaseQual fixLetrecExp generateAuxFunc generateAuxFuncs generateExternal idAuxiliarFunction isPreludeFunction newBindings newIdName newLocalDeclarations newMain newModuleName noCaseOr noCaseOrBinding node outerLets reconstructExpr retrieveCleanTree transformType transformTypezq typeArity typeCons typeTuple typesBody typesConst typesData typesDatum typesExpr typesExternal typesExternals typesFunction typesFunctions typesPredefined void;
import Char;
import Ident :: 1 1 1 Ident 1 ModuleIdent 1 QualIdent 1 charId 1 consId 1 emptyMIdent 1 isQSelectorId 1 isTupleId 1 listId 1 mkIdent 1 mkMIdent 1 moduleName 1 name 1 nilId 1 preludeMIdent 1 qSuccessId 1 qualify 1 qualifyWith 1 renameIdent 1 splitQualIdent 1 tupleId 1 uniqueId 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelEnum :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import IL :: 1 1 1 Alt 1 Binding 1 CallConv 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Eval 1 Expression 1 Literal 1 Module 1 Type 1 zdfEqAlt 1 zdfEqBinding 1 zdfEqCallConv 1 zdfEqConstrDecl 1 zdfEqConstrTerm 1 zdfEqDecl 1 zdfEqEval 1 zdfEqExpression 1 zdfEqLiteral 1 zdfEqModule 1 zdfEqType 1 zdfShowAlt 1 zdfShowBinding 1 zdfShowCallConv 1 zdfShowConstrDecl 1 zdfShowConstrTerm 1 zdfShowDecl 1 zdfShowEval 1 zdfShowExpression 1 zdfShowLiteral 1 zdfShowModule 1 zdfShowType 1;
import List :: 1;
import PrelMaybe :: 1;
;
instance {PrelBase.Eq SymbolType} = zdfEqSymbolType ;
instance {PrelShow.Show SymbolType} = zdfShowSymbolType ;
retrieveCleanTree :: (Ident.Ident, Ident.Ident) -> IL.Expression;
changeFunctionqId :: Ident.QualIdent -> Ident.QualIdent;
extractLets :: IL.Expression -> ([IL.Expression -> IL.Expression], IL.Expression);
outerLets :: IL.Expression -> IL.Expression;
fixLetrecExp :: [IL.Binding] -> IL.Expression -> IL.Expression;
buildLetrecExp :: [IL.Expression -> IL.Expression] -> [IL.Binding] -> IL.Expression -> IL.Expression;
buildLetExp :: [IL.Expression -> IL.Expression] -> IL.Expression -> IL.Expression;
createTree :: Ident.QualIdent -> [Ident.Ident] -> Ident.Ident -> [IL.Expression] -> IL.Expression;
noCaseOrBinding :: IL.Binding -> PrelBase.Bool;
noCaseOr :: IL.Expression -> PrelBase.Bool;
extractBindingsAlts :: Ident.QualIdent -> [IL.Alt] -> [Ident.Ident] -> PrelBase.Int -> [IL.Expression] -> PrelBase.Bool -> PrelBase.Bool -> ([IL.Expression], [IL.Alt], PrelBase.Int);
extractBindingsLBindings :: Ident.QualIdent -> [IL.Binding] -> PrelBase.Int -> ([IL.Expression], [IL.Expression -> IL.Expression], [IL.Binding], PrelBase.Int);
extractBindingsBinding :: Ident.QualIdent -> IL.Binding -> PrelBase.Int -> ([IL.Expression], [IL.Expression -> IL.Expression], PrelBase.Int);
extractBindingsList :: Ident.QualIdent -> [IL.Expression] -> [Ident.Ident] -> PrelBase.Int -> [IL.Expression] -> PrelBase.Bool -> PrelBase.Bool -> ([IL.Expression], [IL.Expression], PrelBase.Int);
extractBindingsApply :: IL.Expression -> [IL.Expression] -> PrelBase.Int -> SecondPhaseResult;
extractBindings :: Ident.QualIdent -> IL.Expression -> [Ident.Ident] -> PrelBase.Int -> [IL.Expression] -> PrelBase.Bool -> PrelBase.Bool -> SecondPhaseResult;
newBindings :: Ident.QualIdent -> IL.Expression -> [Ident.Ident] -> PrelBase.Int -> [IL.Expression] -> PrelBase.Bool -> PrelBase.Bool -> SecondPhaseResult;
decomposeExp :: [IL.Expression] -> PrelBase.Int -> IL.Expression -> SecondPhaseResult;
newLocalDeclarations :: Ident.QualIdent -> PrelBase.Bool -> IL.Expression -> [Ident.Ident] -> PrelBase.Int -> IL.Expression;
debugFunction :: PrelBase.Bool -> IL.Decl -> IL.Decl;
debugAuxiliary :: Ident.ModuleIdent -> [(Ident.QualIdent, (SymbolType, PrelBase.Int, IL.Type))] -> [IL.Decl];
debugTypePredef :: Ident.Ident -> PrelBase.Int -> IL.Type;
typesExpr :: IL.Expression -> DebugTypeList -> DebugTypeList;
typesBody :: IL.Decl -> DebugTypeList -> DebugTypeList;
typesPredefined :: [IL.Decl] -> DebugTypeList;
typesConst :: Ident.QualIdent -> PrelBase.Int -> IL.ConstrDecl [IL.Type] -> DebugTypeList -> DebugTypeList;
typesExternal :: IL.Decl -> DebugTypeList -> DebugTypeList;
typesDatum :: IL.Decl -> DebugTypeList -> DebugTypeList;
typesFunction :: IL.Decl -> DebugTypeList -> DebugTypeList;
typesExternals :: [IL.Decl] -> DebugTypeList -> DebugTypeList;
typesData :: [IL.Decl] -> DebugTypeList -> DebugTypeList;
typesFunctions :: [IL.Decl] -> DebugTypeList -> DebugTypeList;
collectSymbolTypes :: [IL.Decl] -> [IL.Decl] -> [IL.Decl] -> DebugTypeList -> DebugTypeList;
typeArity :: IL.Type -> PrelBase.Int;
transformTypezq :: IL.Type -> IL.Type;
transformType :: PrelBase.Int -> IL.Type -> IL.Type;
reconstructExpr :: PrelBase.Bool -> Ident.QualIdent -> PrelBase.Int -> IL.Expression;
createApply :: IL.Expression -> [IL.Expression] -> IL.Expression;
extractApply :: IL.Expression -> [IL.Expression] -> (IL.Expression, [IL.Expression]);
idAuxiliarFunction :: Ident.Ident -> PrelBase.Int -> Ident.Ident;
generateAuxFunc :: Ident.ModuleIdent -> (Ident.QualIdent, (SymbolType, PrelBase.Int, IL.Type)) -> PrelBase.Int -> IL.Decl;
generateExternal :: Ident.ModuleIdent -> Ident.QualIdent -> PrelBase.Int -> IL.Type -> IL.Decl;
generateAuxFuncs :: Ident.ModuleIdent -> (Ident.QualIdent, (SymbolType, PrelBase.Int, IL.Type)) -> [IL.Decl];
firstPhaseQual :: Ident.ModuleIdent -> PrelBase.Int -> PrelBase.Int -> [Ident.QualIdent] -> Ident.QualIdent -> PrelBase.Bool -> IL.Expression;
firstPhaseBinding :: Ident.ModuleIdent -> PrelBase.Int -> [Ident.QualIdent] -> IL.Binding -> IL.Binding;
firstPhaseExp :: Ident.ModuleIdent -> PrelBase.Int -> [Ident.QualIdent] -> IL.Expression -> IL.Expression;
debugFirstPhase :: Ident.ModuleIdent -> [Ident.QualIdent] -> [IL.Decl] -> [IL.Decl];
newMain :: Ident.Ident -> [IL.Decl];
dAddMain :: Ident.Ident -> IL.Module -> IL.Module;
debugSplitDecls :: [IL.Decl] -> ([IL.Decl], [IL.Decl], [IL.Decl]);
node :: IL.Expression -> IL.Expression -> IL.Expression -> IL.Expression -> IL.Expression -> IL.Expression;
debugBuildList :: [IL.Expression] -> IL.Expression;
createEmptyNode :: [IL.Expression] -> IL.Expression;
emptyNode :: IL.Expression -> IL.Expression;
void :: IL.Expression;
dEvalId :: Ident.QualIdent;
dEvalApply :: IL.Expression -> IL.Expression;
debugTry :: Ident.QualIdent;
debugClean :: Ident.QualIdent;
debugBuildPairExp :: IL.Expression -> IL.Expression -> IL.Expression;
debugNil :: IL.Expression;
debugIdentNil :: Ident.QualIdent;
debugIdentCons :: Ident.QualIdent;
debugIdentTuple :: PrelBase.Int -> Ident.QualIdent;
debugIdentPair :: Ident.QualIdent;
debugTypeMainAux :: IL.Type;
debugTypeLCleanTree :: IL.Type;
debugTypeCleanTree :: IL.Type;
debugTypeLCTree :: IL.Type;
debugTypeCTree :: IL.Type;
debugTypeString :: IL.Type;
debugTypeChar :: IL.Type;
debugTypeTuple :: [IL.Type] -> IL.Type;
debugTypePair :: IL.Type -> IL.Type -> IL.Type;
debugTypeList :: IL.Type -> IL.Type;
typeTuple :: PrelBase.Int -> IL.Type;
typeCons :: IL.Type;
isPreludeFunction :: Ident.QualIdent -> PrelBase.Bool;
debugRenameId :: PrelBase.String -> Ident.Ident -> Ident.Ident;
debugFunctionqId :: Ident.QualIdent;
debugPreludeModule :: Ident.ModuleIdent;
debugQualPreludeName :: PrelBase.String -> Ident.QualIdent;
debugQualPrelude :: Ident.Ident -> Ident.QualIdent;
newModuleName :: Ident.ModuleIdent -> PrelBase.String -> Ident.QualIdent;
newIdName :: PrelBase.Int -> PrelBase.String -> Ident.Ident;
debugDecls :: Ident.ModuleIdent -> PrelBase.Bool -> [IL.Decl] -> [IL.Decl];
dTransform :: PrelBase.Bool -> IL.Module -> IL.Module;
debugFunctionName :: PrelBase.String;
debugPreludeName :: PrelBase.String;
debugPrefix :: PrelBase.String;
data SymbolType = IsFunction | IsConstructor | IsNewConstructor | IsExternal;
type DebugTypeList = [(Ident.QualIdent, (SymbolType, PrelBase.Int, IL.Type))];
type SecondPhaseResult = ([IL.Expression], IL.Expression, PrelBase.Int);
zdfEqSymbolType :: {PrelBase.Eq SymbolType};
zdfShowSymbolType :: {PrelShow.Show SymbolType};
