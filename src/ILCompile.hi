__interface "Main" ILCompile 1 500 where
__export  ILCompile CompState addHnfs apFun applyStrict bindVar camCompile camCompileData caseTag compileBinding compileCase compileConstr compileData compileDecl compileExt compileFun compileLazzy compileRecBindings compileSelector compileSelectorExpr compileStrict con freshName fun hidden hiddenCon internalError isHnf isHnfApp literal nameSupply returnWhnf rf unalias unaliasCase unaliasExpr unaliasStmt unaliasVar var;
import PrelIOBase;
import PrelRead;
import PrelArr;
import Char;
import IO;
import Error;
import IORef;
import IOExts;
import Set;
import Ident :: 1 1 1 Ident 1 ModuleIdent 1 QualIdent 1 anonId 1 isQSelectorId 1 moduleName 1 qIOId 1 qualify 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import PrelBase ! :: 1;
import PrelFloat :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelEnum :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Cam :: 1 1 1 Alt 1 Bind 1 Case 1 ConstrDecl 1 Decl 1 Expr 1 Literal 1 Module 1 Name 1 RF 1 Stmt 1 Tag 1 demangle 1 mangle 1 mangleQualified 1 zdfEqBind 1 zdfEqCase 1 zdfEqConstrDecl 1 zdfEqDecl 1 zdfEqExpr 1 zdfEqLiteral 1 zdfEqName 1 zdfEqRF 1 zdfEqStmt 1 zdfEqTag 1 zdfOrdName 1 zdfShowBind 1 zdfShowCase 1 zdfShowConstrDecl 1 zdfShowDecl 1 zdfShowExpr 1 zdfShowLiteral 1 zdfShowName 1 zdfShowRF 1 zdfShowStmt 1 zdfShowTag 1;
import Map :: 1 1 1 FM 1 addToFM 1 lookupFM 1 zdfEqFM 1 zdfShowFM 1 zzeroFM 1;
import IL :: 1 1 1 Alt 1 Binding 1 CallConv 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Eval 1 Expression 1 Literal 1 Module 1 Type 1 zdfEqAlt 1 zdfEqBinding 1 zdfEqCallConv 1 zdfEqConstrDecl 1 zdfEqConstrTerm 1 zdfEqDecl 1 zdfEqEval 1 zdfEqExpression 1 zdfEqLiteral 1 zdfEqModule 1 zdfEqType 1 zdfShowAlt 1 zdfShowBinding 1 zdfShowCallConv 1 zdfShowConstrDecl 1 zdfShowConstrTerm 1 zdfShowDecl 1 zdfShowEval 1 zdfShowExpression 1 zdfShowLiteral 1 zdfShowModule 1 zdfShowType 1;
import Combined :: 1 1 1 Id 1 St 1 StateT 1 runSt 1 updateSt 1 zdfMonadId 1 zdfMonadStateT 1;
import SCC :: 1 1 1 scc 1;
import Prelude :: 1;
import Env :: 1 1 1;
import List :: 1;
import Maybe :: 1;
import Monad :: 1;
import PrelMaybe :: 1;
;
freshName :: CompState Cam.Name;
internalError :: __forall a => PrelBase.String -> a;
nameSupply :: PrelBase.String -> [Cam.Name];
hidden :: Ident.QualIdent;
hiddenCon :: Cam.Name;
con :: Ident.QualIdent -> Cam.Name;
apFun :: PrelBase.Int -> Cam.Name;
fun :: Ident.QualIdent -> Cam.Name;
var :: Ident.Ident -> Cam.Name;
unaliasVar :: Map.FM Cam.Name Cam.Name -> Cam.Name -> Cam.Name;
unaliasCase :: Map.FM Cam.Name Cam.Name -> Cam.Case -> Cam.Case;
unaliasExpr :: Map.FM Cam.Name Cam.Name -> Cam.Expr -> Cam.Expr;
unaliasStmt :: Map.FM Cam.Name Cam.Name -> Cam.Stmt -> Cam.Stmt;
unalias :: Cam.Stmt -> Cam.Stmt;
bindVar :: Cam.Name -> Cam.Expr -> CompState [[Cam.Bind]];
compileLazzy :: Cam.Name -> IL.Expression -> [Cam.Name] -> CompState [[Cam.Bind]];
compileRecBindings :: [IL.Binding] -> CompState [[Cam.Bind]];
compileBinding :: IL.Binding -> CompState [[Cam.Bind]];
caseTag :: Cam.Name -> IL.ConstrTerm -> Cam.Stmt -> Cam.Case;
compileCase :: [Ident.Ident] -> Cam.Name -> IL.Alt -> [Cam.Name] -> CompState Cam.Case;
rf :: IL.Eval -> Cam.RF;
isHnfApp :: IL.Expression -> [IL.Expression] -> PrelBase.Bool;
isHnf :: [Ident.Ident] -> IL.Expression -> PrelBase.Bool;
addHnfs :: [IL.Binding] -> [Ident.Ident] -> [Ident.Ident];
literal :: IL.Literal -> Cam.Literal;
applyStrict :: Cam.Stmt -> [Cam.Name] -> CompState Cam.Stmt;
returnWhnf :: IL.Expression -> [Cam.Name] -> CompState Cam.Stmt;
compileStrict :: [Ident.Ident] -> IL.Expression -> [Cam.Name] -> CompState Cam.Stmt;
compileSelectorExpr :: [(Ident.Ident, Cam.Name)] -> IL.Expression -> CompState Cam.Stmt;
compileSelector :: ([Cam.Name] -> Cam.Stmt -> Cam.Decl) -> [Ident.Ident] -> IL.Expression -> CompState Cam.Decl;
compileExt :: Ident.QualIdent -> IL.CallConv -> PrelBase.Int -> PrelBase.Bool -> PrelBase.String -> [Cam.Decl];
compileFun :: Ident.QualIdent -> [Ident.Ident] -> IL.Expression -> Cam.Decl;
compileConstr :: IL.ConstrDecl [IL.Type] -> Cam.ConstrDecl;
compileData :: Ident.QualIdent -> [IL.ConstrDecl [IL.Type]] -> Cam.Decl;
compileDecl :: IL.Decl -> [Cam.Decl];
camCompileData :: [IL.Decl] -> [Cam.Decl];
camCompile :: IL.Module -> Cam.Module;
type CompState a = Combined.StateT [Cam.Name] Combined.Id a;
