__interface "Main" SyntaxCheck 1 500 where
__export  SyntaxCheck syntaxCheck syntaxCheckGoal;
import PrelReal;
import PrelEnum;
import PrelArr;
import Char;
import PrelConc;
import IO;
import Error;
import IORef;
import IOExts;
import Ratio;
import CurryPP;
import Pretty;
import Set;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Prelude :: 1;
import Base :: 1 1 1 Linear 1 PIdent 1 QuantExpr 1 ValueEnv 1 ValueInfo 1 errorAt 1 internalError 1 isEvalAnnot 1 isTypeDecl 1 isTypeSig 1 isValueDecl 1 linear 1 zdfEqPIdent 1 zdfQuantExprConstrTerm 1 zdfQuantExprDecl 1 zdfQuantExprLhs 1 zdfQuantExprStatement 1 zdfQuantExprZMZN 1 zdfShowValueInfo 1;
import Env :: 1 1 1 Env 1;
import NestEnv :: 1 1 1 NestEnv 1 bindNestEnv 1 globalEnv 1 lookupNestEnv 1 nestEnv 1 qualBindNestEnv 1 qualLookupNestEnv 1 toplevelEnv 1 zdfFunctorNestEnv 1 zdfShowNestEnv 1;
import List :: 1;
import Maybe :: 1;
import Monad :: 1;
import Combined :: 1 1 1 Id 1 St 1 StateT 1 runSt 1 updateSt 1 zdfFunctorId 1 zdfFunctorStateT 1 zdfMonadId 1 zdfMonadStateT 1;
import Utils :: 1 1 1 mapAccumM 1 zpzpzn 1;
import PrelMaybe :: 1;
import Ident :: 1 1 Ident 1 ModuleIdent 1 QualIdent 1 anonId 1 isQualified 1 isTupleId 1 mkIdent 1 name 1 qualName 1 qualify 1 qualifyWith 1 renameIdent 1 splitQualIdent 1 tupleArity 1 unRenameIdent 1 uniqueId 1 unqualify 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import Position :: 1 1 Position 1 zdfEqPosition 1 zdfOrdPosition 1 zdfShowPosition 1;
import TopEnv :: 1 1 Source 1 TopEnv 1 zdfFunctorTopEnv 1 zdfShowTopEnv 1;
import CurrySyntax :: 1 1 Alt 1 CallConv 1 CondExpr 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Equation 1 EvalAnnotation 1 Expression 1 Goal 1 Import 1 ImportSpec 1 Infix 1 InfixOp 1 Lhs 1 Literal 1 NewConstrDecl 1 Qualified 1 Rhs 1 Statement 1 TypeExpr 1 flatLhs 1 opName 1 zdfEqAlt 1 zdfEqCallConv 1 zdfEqCondExpr 1 zdfEqConstrDecl 1 zdfEqConstrTerm 1 zdfEqDecl 1 zdfEqEquation 1 zdfEqEvalAnnotation 1 zdfEqExpression 1 zdfEqGoal 1 zdfEqInfix 1 zdfEqInfixOp 1 zdfEqLhs 1 zdfEqLiteral 1 zdfEqNewConstrDecl 1 zdfEqRhs 1 zdfEqStatement 1 zdfEqTypeExpr 1 zdfShowAlt 1 zdfShowCallConv 1 zdfShowCondExpr 1 zdfShowConstrDecl 1 zdfShowConstrTerm 1 zdfShowDecl 1 zdfShowEquation 1 zdfShowEvalAnnotation 1 zdfShowExpression 1 zdfShowGoal 1 zdfShowInfix 1 zdfShowInfixOp 1 zdfShowLhs 1 zdfShowLiteral 1 zdfShowNewConstrDecl 1 zdfShowRhs 1 zdfShowStatement 1 zdfShowTypeExpr 1;
import Types :: 1 1 ExistTypeScheme 1 Type 1 TypeScheme 1 arrowArity 1 zdfEqExistTypeScheme 1 zdfEqType 1 zdfShowExistTypeScheme 1 zdfShowType 1;
import Map :: 1 1 FM 1;
;
instance {PrelBase.Eq RenameInfo} = zdfEqRenameInfo ;
instance {PrelShow.Show RenameInfo} = zdfShowRenameInfo ;
syntaxCheckGoal :: Base.ValueEnv -> CurrySyntax.Goal -> CurrySyntax.Goal;
syntaxCheck :: Ident.ModuleIdent -> Base.ValueEnv -> [CurrySyntax.Decl] -> [CurrySyntax.Decl];
type RenameState a = Combined.StateT PrelBase.Int Combined.Id a;
type RenameEnv = NestEnv.NestEnv RenameInfo;
data RenameInfo = Constr PrelBase.Int | GlobalVar | LocalVar Ident.Ident;
zdfShowRenameInfo :: {PrelShow.Show RenameInfo};
zdfEqRenameInfo :: {PrelBase.Eq RenameInfo};
