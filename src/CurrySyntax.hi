__interface "Main" CurrySyntax 1 500 where
__export  CurrySyntax Alt{Alt} CallConv{CallConvCCall CallConvPrimitive} CondExpr{CondExpr} ConstrDecl{ConOpDecl ConstrDecl} ConstrTerm{AsPattern ConstructorPattern InfixPattern LazzyPattern ListPattern LiteralPattern NegativePattern ParenPattern TuplePattern VariablePattern} Decl{DataDecl EvalAnnot ExternalDecl ExtraVariables FlatExternalDecl FunctionDecl ImportDecl InfixDecl NewtypeDecl PatternDecl TypeDecl TypeSig} Equation{Equation} EvalAnnotation{EvalChoice EvalRigid} Export{Export ExportModule ExportTypeAll ExportTypeWith} ExportSpec{Exporting} Expression{Apply Case Constructor Do EnumFrom EnumFromThen EnumFromThenTo EnumFromTo IfThenElse InfixApply Lambda LeftSection Let List ListCompr Literal Paren RightSection Tuple Typed UnaryMinus Variable} Goal{Goal} IDecl{HidingDataDecl IDataDecl IFunctionDecl IImportDecl IInfixDecl INewtypeDecl ITypeDecl} Import{Import ImportTypeAll ImportTypeWith} ImportSpec{Hiding Importing} Infix{Infix InfixL InfixR} InfixOp{InfixConstr InfixOp} Interface{Interface} Lhs{ApLhs FunLhs OpLhs} Literal{Char Float Int String} Module{Module} NewConstrDecl{NewConstrDecl} Qualified Rhs{GuardedRhs SimpleRhs} Statement{StmtBind StmtDecl StmtExpr} TypeExpr{ArrowType ConstructorType ListType TupleType VariableType} flatLhs opName;
import PrelReal;
import PrelEnum;
import PrelList;
import Char;
import List;
import PrelBase ! :: 1;
import PrelFloat :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelShow :: 1;
import Ident :: 1 1 1 Ident 1 ModuleIdent 1 QualIdent 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowModuleIdent 1 zdfShowQualIdent 1;
import Position :: 1 1 1 Position 1 zdfEqPosition 1 zdfOrdPosition 1 zdfShowPosition 1;
import PrelMaybe :: 1;
;
instance {PrelBase.Eq Goal} = zdfEqGoal ;
instance {PrelShow.Show Goal} = zdfShowGoal ;
instance {PrelBase.Eq Alt} = zdfEqAlt ;
instance {PrelShow.Show Alt} = zdfShowAlt ;
instance {PrelBase.Eq Statement} = zdfEqStatement ;
instance {PrelShow.Show Statement} = zdfShowStatement ;
instance {PrelBase.Eq InfixOp} = zdfEqInfixOp ;
instance {PrelShow.Show InfixOp} = zdfShowInfixOp ;
instance {PrelBase.Eq Expression} = zdfEqExpression ;
instance {PrelShow.Show Expression} = zdfShowExpression ;
instance {PrelBase.Eq ConstrTerm} = zdfEqConstrTerm ;
instance {PrelShow.Show ConstrTerm} = zdfShowConstrTerm ;
instance {PrelBase.Eq Literal} = zdfEqLiteral ;
instance {PrelShow.Show Literal} = zdfShowLiteral ;
instance {PrelBase.Eq CondExpr} = zdfEqCondExpr ;
instance {PrelShow.Show CondExpr} = zdfShowCondExpr ;
instance {PrelBase.Eq Rhs} = zdfEqRhs ;
instance {PrelShow.Show Rhs} = zdfShowRhs ;
instance {PrelBase.Eq Lhs} = zdfEqLhs ;
instance {PrelShow.Show Lhs} = zdfShowLhs ;
instance {PrelBase.Eq Equation} = zdfEqEquation ;
instance {PrelShow.Show Equation} = zdfShowEquation ;
instance {PrelBase.Eq TypeExpr} = zdfEqTypeExpr ;
instance {PrelShow.Show TypeExpr} = zdfShowTypeExpr ;
instance {PrelBase.Eq IDecl} = zdfEqIDecl ;
instance {PrelShow.Show IDecl} = zdfShowIDecl ;
instance {PrelBase.Eq Interface} = zdfEqInterface ;
instance {PrelShow.Show Interface} = zdfShowInterface ;
instance {PrelBase.Eq CallConv} = zdfEqCallConv ;
instance {PrelShow.Show CallConv} = zdfShowCallConv ;
instance {PrelBase.Eq EvalAnnotation} = zdfEqEvalAnnotation ;
instance {PrelShow.Show EvalAnnotation} = zdfShowEvalAnnotation ;
instance {PrelBase.Eq Infix} = zdfEqInfix ;
instance {PrelShow.Show Infix} = zdfShowInfix ;
instance {PrelBase.Eq NewConstrDecl} = zdfEqNewConstrDecl ;
instance {PrelShow.Show NewConstrDecl} = zdfShowNewConstrDecl ;
instance {PrelBase.Eq ConstrDecl} = zdfEqConstrDecl ;
instance {PrelShow.Show ConstrDecl} = zdfShowConstrDecl ;
instance {PrelBase.Eq Decl} = zdfEqDecl ;
instance {PrelShow.Show Decl} = zdfShowDecl ;
instance {PrelBase.Eq Import} = zdfEqImport ;
instance {PrelShow.Show Import} = zdfShowImport ;
instance {PrelBase.Eq ImportSpec} = zdfEqImportSpec ;
instance {PrelShow.Show ImportSpec} = zdfShowImportSpec ;
instance {PrelBase.Eq Export} = zdfEqExport ;
instance {PrelShow.Show Export} = zdfShowExport ;
instance {PrelBase.Eq ExportSpec} = zdfEqExportSpec ;
instance {PrelShow.Show ExportSpec} = zdfShowExportSpec ;
instance {PrelBase.Eq Module} = zdfEqModule ;
instance {PrelShow.Show Module} = zdfShowModule ;
flatLhs :: Lhs -> (Ident.Ident, [ConstrTerm]);
opName :: InfixOp -> Ident.QualIdent;
data Module = Module Ident.ModuleIdent (PrelMaybe.Maybe ExportSpec) [Decl];
data ExportSpec = Exporting Position.Position [Export];
data Export = Export Ident.QualIdent | ExportTypeWith Ident.QualIdent [Ident.Ident] | ExportTypeAll Ident.QualIdent | ExportModule Ident.ModuleIdent;
data ImportSpec = Importing Position.Position [Import] | Hiding Position.Position [Import];
data Import = Import Ident.Ident | ImportTypeWith Ident.Ident [Ident.Ident] | ImportTypeAll Ident.Ident;
data Decl = ImportDecl Position.Position Ident.ModuleIdent Qualified (PrelMaybe.Maybe Ident.ModuleIdent) (PrelMaybe.Maybe ImportSpec) | InfixDecl Position.Position Infix PrelBase.Int [Ident.Ident] | DataDecl Position.Position Ident.Ident [Ident.Ident] [ConstrDecl] | NewtypeDecl Position.Position Ident.Ident [Ident.Ident] NewConstrDecl | TypeDecl Position.Position Ident.Ident [Ident.Ident] TypeExpr | TypeSig Position.Position [Ident.Ident] TypeExpr | EvalAnnot Position.Position [Ident.Ident] EvalAnnotation | FunctionDecl Position.Position Ident.Ident [Equation] | ExternalDecl Position.Position CallConv (PrelMaybe.Maybe PrelBase.String) Ident.Ident TypeExpr | FlatExternalDecl Position.Position [Ident.Ident] | PatternDecl Position.Position ConstrTerm Rhs | ExtraVariables Position.Position [Ident.Ident];
data ConstrDecl = ConstrDecl Position.Position [Ident.Ident] Ident.Ident [TypeExpr] | ConOpDecl Position.Position [Ident.Ident] TypeExpr Ident.Ident TypeExpr;
data NewConstrDecl = NewConstrDecl Position.Position [Ident.Ident] Ident.Ident TypeExpr;
type Qualified = PrelBase.Bool;
data Infix = InfixL | InfixR | Infix;
data EvalAnnotation = EvalRigid | EvalChoice;
data CallConv = CallConvPrimitive | CallConvCCall;
data Interface = Interface Ident.ModuleIdent [IDecl];
data IDecl = IImportDecl Position.Position Ident.ModuleIdent | IInfixDecl Position.Position Infix PrelBase.Int Ident.QualIdent | HidingDataDecl Position.Position Ident.Ident [Ident.Ident] | IDataDecl Position.Position Ident.QualIdent [Ident.Ident] [PrelMaybe.Maybe ConstrDecl] | INewtypeDecl Position.Position Ident.QualIdent [Ident.Ident] NewConstrDecl | ITypeDecl Position.Position Ident.QualIdent [Ident.Ident] TypeExpr | IFunctionDecl Position.Position Ident.QualIdent TypeExpr;
data TypeExpr = ConstructorType Ident.QualIdent [TypeExpr] | VariableType Ident.Ident | TupleType [TypeExpr] | ListType TypeExpr | ArrowType TypeExpr TypeExpr;
data Equation = Equation Position.Position Lhs Rhs;
data Lhs = FunLhs Ident.Ident [ConstrTerm] | OpLhs ConstrTerm Ident.Ident ConstrTerm | ApLhs Lhs [ConstrTerm];
data Rhs = SimpleRhs Position.Position Expression [Decl] | GuardedRhs [CondExpr] [Decl];
data CondExpr = CondExpr Position.Position Expression Expression;
data Literal = Char PrelBase.Char | Int Ident.Ident PrelBase.Int | Float PrelFloat.Double | String PrelBase.String;
data ConstrTerm = LiteralPattern Literal | NegativePattern Ident.Ident Literal | VariablePattern Ident.Ident | ConstructorPattern Ident.QualIdent [ConstrTerm] | InfixPattern ConstrTerm Ident.QualIdent ConstrTerm | ParenPattern ConstrTerm | TuplePattern [ConstrTerm] | ListPattern [ConstrTerm] | AsPattern Ident.Ident ConstrTerm | LazzyPattern ConstrTerm;
data Expression = Literal Literal | Variable Ident.QualIdent | Constructor Ident.QualIdent | Paren Expression | Typed Expression TypeExpr | Tuple [Expression] | List [Expression] | ListCompr Expression [Statement] | EnumFrom Expression | EnumFromThen Expression Expression | EnumFromTo Expression Expression | EnumFromThenTo Expression Expression Expression | UnaryMinus Ident.Ident Expression | Apply Expression Expression | InfixApply Expression InfixOp Expression | LeftSection Expression InfixOp | RightSection InfixOp Expression | Lambda [ConstrTerm] Expression | Let [Decl] Expression | Do [Statement] Expression | IfThenElse Expression Expression Expression | Case Expression [Alt];
data InfixOp = InfixOp Ident.QualIdent | InfixConstr Ident.QualIdent;
data Statement = StmtExpr Expression | StmtDecl [Decl] | StmtBind ConstrTerm Expression;
data Alt = Alt Position.Position ConstrTerm Rhs;
data Goal = Goal Position.Position Expression [Decl];
zdfShowExport :: {PrelShow.Show Export};
zdfShowExportSpec :: {PrelShow.Show ExportSpec};
zdfEqExport :: {PrelBase.Eq Export};
zdfEqExportSpec :: {PrelBase.Eq ExportSpec};
zdfShowImport :: {PrelShow.Show Import};
zdfShowImportSpec :: {PrelShow.Show ImportSpec};
zdfEqImport :: {PrelBase.Eq Import};
zdfEqImportSpec :: {PrelBase.Eq ImportSpec};
zdfShowInfix :: {PrelShow.Show Infix};
zdfEqInfix :: {PrelBase.Eq Infix};
zdfShowEvalAnnotation :: {PrelShow.Show EvalAnnotation};
zdfEqEvalAnnotation :: {PrelBase.Eq EvalAnnotation};
zdfShowCallConv :: {PrelShow.Show CallConv};
zdfEqCallConv :: {PrelBase.Eq CallConv};
zdfShowTypeExpr :: {PrelShow.Show TypeExpr};
zdfShowNewConstrDecl :: {PrelShow.Show NewConstrDecl};
zdfShowConstrDecl :: {PrelShow.Show ConstrDecl};
zdfShowIDecl :: {PrelShow.Show IDecl};
zdfShowInterface :: {PrelShow.Show Interface};
zdfEqTypeExpr :: {PrelBase.Eq TypeExpr};
zdfEqNewConstrDecl :: {PrelBase.Eq NewConstrDecl};
zdfEqConstrDecl :: {PrelBase.Eq ConstrDecl};
zdfEqIDecl :: {PrelBase.Eq IDecl};
zdfEqInterface :: {PrelBase.Eq Interface};
zdfShowLiteral :: {PrelShow.Show Literal};
zdfEqLiteral :: {PrelBase.Eq Literal};
zdfShowConstrTerm :: {PrelShow.Show ConstrTerm};
zdfShowLhs :: {PrelShow.Show Lhs};
zdfEqConstrTerm :: {PrelBase.Eq ConstrTerm};
zdfEqLhs :: {PrelBase.Eq Lhs};
zdfShowInfixOp :: {PrelShow.Show InfixOp};
zdfEqInfixOp :: {PrelBase.Eq InfixOp};
zdfShowAlt :: {PrelShow.Show Alt};
zdfShowCondExpr :: {PrelShow.Show CondExpr};
zdfShowEquation :: {PrelShow.Show Equation};
zdfShowDecl :: {PrelShow.Show Decl};
zdfShowExpression :: {PrelShow.Show Expression};
zdfShowStatement :: {PrelShow.Show Statement};
zdfShowRhs :: {PrelShow.Show Rhs};
zdfShowModule :: {PrelShow.Show Module};
zdfEqAlt :: {PrelBase.Eq Alt};
zdfEqCondExpr :: {PrelBase.Eq CondExpr};
zdfEqEquation :: {PrelBase.Eq Equation};
zdfEqDecl :: {PrelBase.Eq Decl};
zdfEqExpression :: {PrelBase.Eq Expression};
zdfEqStatement :: {PrelBase.Eq Statement};
zdfEqRhs :: {PrelBase.Eq Rhs};
zdfEqModule :: {PrelBase.Eq Module};
zdfShowGoal :: {PrelShow.Show Goal};
zdfEqGoal :: {PrelBase.Eq Goal};
