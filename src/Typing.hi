__interface "Main" Typing 1 500 where
__export  Typing Typeable{typeOf};
import PrelReal;
import PrelEnum;
import PrelArr;
import Char;
import PrelConc;
import IO;
import Maybe;
import List;
import Error;
import IORef;
import IOExts;
import Ratio;
import CurryPP;
import Pretty;
import Set;
import PrelBase ! :: 1;
import PrelFloat :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelShow :: 1;
import PrelList :: 1;
import Prelude :: 1;
import Base :: 1 1 1 ValueEnv 1 ValueInfo 1 infixOp 1 internalError 1 lookupValue 1 qualLookupValue 1 zdfShowValueInfo 1;
import TypeSubst :: 1 1 1 SubstType 1 TypeSubst 1 bindVar 1 expandAliasType 1 normalizze 1 zdfSubstTypeExistTypeScheme 1 zdfSubstTypeTopEnv 1 zdfSubstTypeType 1 zdfSubstTypeTypeScheme 1 zdfSubstTypeValueInfo 1;
import Combined :: 1 1 1 Id 1 St 1 StateT 1 callSt 1 fetchSt 1 liftSt 1 runSt 1 updateSt 1 updateStzu 1 zdfMonadId 1 zdfMonadStateT 1;
import Monad :: 1;
import Utils :: 1 1 1 foldr2 1;
import PrelMaybe :: 1;
import Ident :: 1 1 Ident 1 ModuleIdent 1 QualIdent 1 zdfEqIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdQualIdent 1 zdfShowIdent 1 zdfShowQualIdent 1;
import Position :: 1 1 Position 1 zdfEqPosition 1 zdfOrdPosition 1 zdfShowPosition 1;
import Env :: 1 1 Env 1;
import TopEnv :: 1 1 Source 1 TopEnv 1 zdfShowTopEnv 1;
import CurrySyntax :: 1 1 Alt 1 CallConv 1 CondExpr 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Equation 1 EvalAnnotation 1 Expression 1 Import 1 ImportSpec 1 Infix 1 InfixOp 1 Lhs 1 Literal 1 NewConstrDecl 1 Qualified 1 Rhs 1 Statement 1 TypeExpr 1 zdfEqAlt 1 zdfEqCondExpr 1 zdfEqConstrTerm 1 zdfEqDecl 1 zdfEqExpression 1 zdfEqInfixOp 1 zdfEqLiteral 1 zdfEqRhs 1 zdfEqStatement 1 zdfEqTypeExpr 1 zdfShowAlt 1 zdfShowCondExpr 1 zdfShowConstrTerm 1 zdfShowDecl 1 zdfShowExpression 1 zdfShowInfixOp 1 zdfShowLiteral 1 zdfShowRhs 1 zdfShowStatement 1 zdfShowTypeExpr 1;
import Types :: 1 1 ExistTypeScheme 1 Type 1 TypeScheme 1 boolType 1 charType 1 floatType 1 intType 1 listType 1 stringType 1 tupleType 1 unitType 1 zdfEqExistTypeScheme 1 zdfEqType 1 zdfEqTypeScheme 1 zdfShowExistTypeScheme 1 zdfShowType 1 zdfShowTypeScheme 1;
import Subst :: 1 1 Subst 1 idSubst 1 zdfShowSubst 1;
import Map :: 1 1 FM 1;
;
instance {Typeable CurrySyntax.Rhs} = zdfTypeableRhs ;
instance {Typeable CurrySyntax.Expression} = zdfTypeableExpression ;
instance {Typeable CurrySyntax.ConstrTerm} = zdfTypeableConstrTerm ;
instance {Typeable Ident.Ident} = zdfTypeableIdent ;
type TyState a = Combined.StateT TypeSubst.TypeSubst (Combined.StateT PrelBase.Int Combined.Id) a;
class Typeable a where { typeOf :: Base.ValueEnv -> a -> Types.Type; };
zdfTypeableRhs :: {Typeable CurrySyntax.Rhs};
zdfTypeableExpression :: {Typeable CurrySyntax.Expression};
zdfTypeableConstrTerm :: {Typeable CurrySyntax.ConstrTerm};
zdfTypeableIdent :: {Typeable Ident.Ident};
