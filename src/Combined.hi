__interface "Main" Combined 1 500 where
__export  Combined ErrorT{ErrorT} Id{Id} ReaderT{ReaderT} Ref RefMonad{newRef readRef writeRef} Rt St StateT{StateT} callErr callId callRt callSt changeSt envRt fetchSt liftErr liftRt liftSt putEnvRt ro rtCurry rtUncurry runRt runSt stCurry stUncurry unErrorT unId unReaderT unStateT updateSt updateStzu;
import PrelNum;
import PrelShow;
import IO :: 1;
import Monad :: 1;
import Error :: 1 1 1 Error 1 zdfFunctorError 1 zdfMonadError 1;
import IORef :: 1;
import PrelBase ! :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelArr :: 1;
import IOExts :: 1;
;
instance __forall s m :: (* -> *) (RefMonad m) => {RefMonad (StateT s m)} = zdfRefMonadStateT ;
instance __forall s m :: (* -> *) (RefMonad m) => {RefMonad (ReaderT s m)} = zdfRefMonadReaderT ;
instance __forall m :: (* -> *) (RefMonad m) => {RefMonad (ErrorT m)} = zdfRefMonadErrorT ;
instance {RefMonad PrelIOBase.IO} = zdfRefMonadIO ;
instance __forall m :: (* -> *) (Monad.MonadPlus m) => {Monad.MonadPlus (ErrorT m)} = zdfMonadPlusErrorT ;
instance __forall m :: (* -> *) (PrelBase.Monad m) => {PrelBase.Monad (ErrorT m)} = zdfMonadErrorT ;
instance __forall f :: (* -> *) (PrelBase.Functor f) => {PrelBase.Functor (ErrorT f)} = zdfFunctorErrorT ;
instance __forall r m :: (* -> *) (Monad.MonadPlus m) => {Monad.MonadPlus (ReaderT r m)} = zdfMonadPlusReaderT ;
instance __forall r m :: (* -> *) (PrelBase.Monad m) => {PrelBase.Monad (ReaderT r m)} = zdfMonadReaderT ;
instance __forall r f :: (* -> *) (PrelBase.Functor f) => {PrelBase.Functor (ReaderT r f)} = zdfFunctorReaderT ;
instance __forall s m :: (* -> *) (Monad.MonadPlus m) => {Monad.MonadPlus (StateT s m)} = zdfMonadPlusStateT ;
instance __forall s m :: (* -> *) (PrelBase.Monad m) => {PrelBase.Monad (StateT s m)} = zdfMonadStateT ;
instance __forall s f :: (* -> *) (PrelBase.Functor f) => {PrelBase.Functor (StateT s f)} = zdfFunctorStateT ;
instance {PrelBase.Monad Id} = zdfMonadId ;
instance {PrelBase.Functor Id} = zdfFunctorId ;
class (PrelBase.Monad m) => RefMonad m :: (* -> *) where { newRef :: __forall a => a -> m (Ref a); readRef :: __forall a => Ref a -> m a; writeRef :: __forall a => Ref a -> a -> m (); };
liftErr :: __forall m :: (* -> *) a (PrelBase.Monad m) => m a -> ErrorT m a;
callErr :: __forall m :: (* -> *) a => ErrorT m a -> m (Error.Error a);
unErrorT :: __forall m :: (* -> *) a => ErrorT m a -> m (Error.Error a);
ro :: __forall r m :: (* -> *) a (PrelBase.Monad m) => ReaderT r m a -> StateT r m a;
rtUncurry :: __forall t r m :: (* -> *) a (PrelBase.Monad m) => (t -> ReaderT r m a) -> ReaderT (r, t) m a;
rtCurry :: __forall r t m :: (* -> *) a (PrelBase.Monad m) => ReaderT (r, t) m a -> t -> ReaderT r m a;
putEnvRt :: __forall r m :: (* -> *) a (PrelBase.Monad m) => r -> ReaderT r m a -> ReaderT r m a;
envRt :: __forall r m :: (* -> *) (PrelBase.Monad m) => ReaderT r m r;
runRt :: __forall r a => Rt r a -> r -> a;
callRt :: __forall r m :: (* -> *) a => ReaderT r m a -> r -> m a;
liftRt :: __forall m :: (* -> *) a r (PrelBase.Monad m) => m a -> ReaderT r m a;
unReaderT :: __forall r m :: (* -> *) a => ReaderT r m a -> r -> m a;
stUncurry :: __forall t s m :: (* -> *) a (PrelBase.Monad m) => (t -> StateT s m (t, a)) -> StateT (s, t) m a;
stCurry :: __forall s t m :: (* -> *) a (PrelBase.Monad m) => StateT (s, t) m a -> t -> StateT s m (t, a);
changeSt :: __forall s m :: (* -> *) (PrelBase.Monad m) => s -> StateT s m s;
fetchSt :: __forall s m :: (* -> *) (PrelBase.Monad m) => StateT s m s;
updateStzu :: __forall s m :: (* -> *) (PrelBase.Monad m) => (s -> s) -> StateT s m ();
updateSt :: __forall s m :: (* -> *) (PrelBase.Monad m) => (s -> s) -> StateT s m s;
runSt :: __forall s a => St s a -> s -> a;
callSt :: __forall s m :: (* -> *) a (PrelBase.Monad m) => StateT s m a -> s -> m a;
liftSt :: __forall m :: (* -> *) a s (PrelBase.Monad m) => m a -> StateT s m a;
unStateT :: __forall s m :: (* -> *) a => StateT s m a -> s -> m (a, s);
callId :: __forall a => Id a -> a;
unId :: __forall a => Id a -> a;
data Id a = Id a;
newtype StateT s m :: (* -> *) a = StateT (s -> m (a, s));
type St s a = StateT s Id a;
data ReaderT r m :: (* -> *) a = ReaderT (r -> m a);
type Rt r a = ReaderT r Id a;
data ErrorT m :: (* -> *) a = ErrorT (m (Error.Error a));
type Ref a = IORef.IORef a;
zdfRefMonadIO :: {RefMonad PrelIOBase.IO};
zdfMonadErrorT :: __forall m :: (* -> *) (PrelBase.Monad m) => {PrelBase.Monad (ErrorT m)};
zdfMonadPlusErrorT :: __forall m :: (* -> *) (Monad.MonadPlus m) => {Monad.MonadPlus (ErrorT m)};
zdfRefMonadErrorT :: __forall m :: (* -> *) (RefMonad m) => {RefMonad (ErrorT m)};
zdfFunctorErrorT :: __forall f :: (* -> *) (PrelBase.Functor f) => {PrelBase.Functor (ErrorT f)};
zdfMonadReaderT :: __forall r m :: (* -> *) (PrelBase.Monad m) => {PrelBase.Monad (ReaderT r m)};
zdfMonadPlusReaderT :: __forall r m :: (* -> *) (Monad.MonadPlus m) => {Monad.MonadPlus (ReaderT r m)};
zdfRefMonadReaderT :: __forall s m :: (* -> *) (RefMonad m) => {RefMonad (ReaderT s m)};
zdfFunctorReaderT :: __forall r f :: (* -> *) (PrelBase.Functor f) => {PrelBase.Functor (ReaderT r f)};
zdfMonadStateT :: __forall s m :: (* -> *) (PrelBase.Monad m) => {PrelBase.Monad (StateT s m)};
zdfMonadPlusStateT :: __forall s m :: (* -> *) (Monad.MonadPlus m) => {Monad.MonadPlus (StateT s m)};
zdfRefMonadStateT :: __forall s m :: (* -> *) (RefMonad m) => {RefMonad (StateT s m)};
zdfFunctorStateT :: __forall s f :: (* -> *) (PrelBase.Functor f) => {PrelBase.Functor (StateT s f)};
zdfMonadId :: {PrelBase.Monad Id};
zdfFunctorId :: {PrelBase.Functor Id};
