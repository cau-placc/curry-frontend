__interface "Main" Exports 1 500 where
__export  Exports expandInterface exportInterface;
import PrelNum;
import PrelReal;
import PrelEnum;
import PrelShow;
import Monad;
import Char;
import PrelConc;
import Utils;
import Ratio;
import Pretty;
import CurryPP;
import PrelBase ! :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelList :: 1;
import CurrySyntax :: 1 1 Alt 1 CallConv 1 CondExpr 1 ConstrDecl 1 ConstrTerm 1 Decl 1 Equation 1 EvalAnnotation 1 Export 1 ExportSpec 1 Expression 1 IDecl 1 Import 1 ImportSpec 1 Infix 1 InfixOp 1 Interface 1 Lhs 1 Literal 1 Module 1 NewConstrDecl 1 Qualified 1 Rhs 1 Statement 1 TypeExpr 1 zdfEqConstrDecl 1 zdfEqDecl 1 zdfEqExport 1 zdfEqExportSpec 1 zdfEqIDecl 1 zdfEqImportSpec 1 zdfEqInfix 1 zdfEqInterface 1 zdfEqModule 1 zdfEqNewConstrDecl 1 zdfEqTypeExpr 1;
import Base :: 1 1 1 Data 1 Linear 1 OpPrec 1 PEnv 1 PrecInfo 1 TCEnv 1 TypeInfo 1 ValueEnv 1 ValueInfo 1 errorAt 1 fromQualType 1 internalError 1 linear 1 nameSupply 1 qualLookupP 1 qualLookupTC 1 qualLookupValue 1 zdfEntityPrecInfo 1 zdfEntityTypeInfo 1 zdfEntityValueInfo 1 zdfEqOpPrec 1 zdfEqPrecInfo 1;
import Map :: 1 1 1 FM 1 addToFM 1 lookupFM 1 toListFM 1 zdfEqFM 1 zzeroFM 1;
import Set :: 1 1 1 Set 1 addToSet 1 deleteFromSet 1 elemSet 1 fromListSet 1 toListSet 1 zdfEqSet 1 zzeroSet 1;
import TopEnv :: 1 1 1 Entity 1 Source 1 TopEnv 1 localBindings 1 moduleImports 1 zddmmerge 1;
import Ident :: 1 1 Ident 1 ModuleIdent 1 QualIdent 1 isInfixOp 1 isQualified 1 moduleName 1 name 1 qualName 1 qualQualify 1 qualUnqualify 1 qualify 1 qualifyWith 1 splitQualIdent 1 unRenameIdent 1 unqualify 1 zdfEqIdent 1 zdfEqModuleIdent 1 zdfEqQualIdent 1 zdfOrdIdent 1 zdfOrdModuleIdent 1 zdfOrdQualIdent 1;
import Position :: 1 1 Position 1 zdfEqPosition 1 zdfOrdPosition 1;
import Env :: 1 1 Env 1;
import Types :: 1 1 ExistTypeScheme 1 Type 1 TypeScheme 1 zdfEqType 1 zdfEqTypeScheme 1;
import Prelude :: 1;
import List :: 1;
import Maybe :: 1;
import PrelMaybe :: 1;
;
exportInterface :: CurrySyntax.Module -> Base.PEnv -> Base.TCEnv -> Base.ValueEnv -> CurrySyntax.Interface;
expandInterface :: CurrySyntax.Module -> Base.TCEnv -> Base.ValueEnv -> CurrySyntax.Module;
